<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>はじめに on 好奇心旺盛な人のためのWebRTC</title>
    <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/</link>
    <description>Recent content in はじめに on 好奇心旺盛な人のためのWebRTC</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <atom:link href="http://localhost:1313/webrtc-for-the-curious-kr/ja/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>何を、なぜ、どのように</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/01-what-why-and-how/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/01-what-why-and-how/</guid>
      <description>&lt;h1 id=&#34;何をなぜどのように&#34;&gt;&#xA;  何を、なぜ、どのように&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%95%e3%82%92%e3%81%aa%e3%81%9c%e3%81%a9%e3%81%ae%e3%82%88%e3%81%86%e3%81%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;webrtcとは&#34;&gt;&#xA;  WebRTCとは？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtc%e3%81%a8%e3%81%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTC とは、Web Real-Time Communication の略で、API であると同時にプロトコルでもあります。WebRTC プロトコルは、2 つの WebRTC エージェントが双方向の安全なリアルタイム通信をネゴシエートするための一連のルールです。WebRTC API は、開発者が WebRTC プロトコルを使用するためのものです。WebRTC API は、JavaScript のみで規定されています。&lt;/p&gt;&#xA;&lt;p&gt;似たような関係として、HTTP と fetch API があります。プロトコルとしての WebRTC が HTTP で、API としての WebRTC が fetch API となります。&lt;/p&gt;&#xA;&lt;p&gt;WebRTC プロトコルは、JavaScript 以外の API/言語でも利用可能です。また、WebRTC 用のサーバーやドメイン固有のツールもあります。これらの実装はすべて WebRTC プロトコルを使用しているため、相互にやりとりできます。&lt;/p&gt;&#xA;&lt;p&gt;WebRTC プロトコルは、IETF の&lt;a href=&#34;https://datatracker.ietf.org/wg/rtcweb/documents/&#34;&gt;rtcweb&lt;/a&gt;というワーキンググループで管理されています。WebRTC API は、W3C の&lt;a href=&#34;https://www.w3.org/TR/webrtc/&#34;&gt;webrtc&lt;/a&gt;で文書化されています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;なぜwebrtcを学ぶ必要があるのか&#34;&gt;&#xA;  なぜWebRTCを学ぶ必要があるのか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%81%aa%e3%81%9cwebrtc%e3%82%92%e5%ad%a6%e3%81%b6%e5%bf%85%e8%a6%81%e3%81%8c%e3%81%82%e3%82%8b%e3%81%ae%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTC を使うことで得られるものは以下の通りです。このリストはすべてを網羅しているわけではありませんが、あなたが旅をしている間に感謝することもあるでしょう。これらの用語のいくつかをまだ知らなくても、この本が教えてくれますのでご安心ください。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;オープンスタンダード&lt;/li&gt;&#xA;&lt;li&gt;複数の実装&lt;/li&gt;&#xA;&lt;li&gt;ブラウザで利用可能&lt;/li&gt;&#xA;&lt;li&gt;必須の暗号化&lt;/li&gt;&#xA;&lt;li&gt;NAT トラバーサル&lt;/li&gt;&#xA;&lt;li&gt;既存技術の再利用&lt;/li&gt;&#xA;&lt;li&gt;輻輳（ふくそう）制御&lt;/li&gt;&#xA;&lt;li&gt;1秒未満のレイテンシー&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;webrtcプロトコルは他の技術の集合体である&#34;&gt;&#xA;  WebRTCプロトコルは他の技術の集合体である&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtc%e3%83%97%e3%83%ad%e3%83%88%e3%82%b3%e3%83%ab%e3%81%af%e4%bb%96%e3%81%ae%e6%8a%80%e8%a1%93%e3%81%ae%e9%9b%86%e5%90%88%e4%bd%93%e3%81%a7%e3%81%82%e3%82%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;これは、本 1 冊分の説明が必要なテーマです。しかし、ここでは 4 つのステップに分けて説明します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>シグナリング</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/02-signaling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/02-signaling/</guid>
      <description>&lt;h1 id=&#34;シグナリング&#34;&gt;&#xA;  シグナリング&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%82%b7%e3%82%b0%e3%83%8a%e3%83%aa%e3%83%b3%e3%82%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;webrtcシグナリングとは&#34;&gt;&#xA;  WebRTCシグナリングとは？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtc%e3%82%b7%e3%82%b0%e3%83%8a%e3%83%aa%e3%83%b3%e3%82%b0%e3%81%a8%e3%81%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTC エージェントを作成したとき、エージェントは他のピアについて何も知りません。誰と接続しようとしているのか、何を送ろうとしているのか、全くわかりません。&#xA;シグナリングは、通話を可能にする最初のブートストラップです。これらの値が交換されると、WebRTC エージェントはお互いに直接通信できるようになります。&lt;/p&gt;&#xA;&lt;p&gt;シグナリングメッセージは単なるテキストです。WebRTC エージェントは、メッセージの転送方法を気にしません。一般的には WebSocket で共有されますが、これは必須ではありません。&lt;/p&gt;&#xA;&lt;h2 id=&#34;webrtc-のシグナリングはどのように動作しますか&#34;&gt;&#xA;  WebRTC のシグナリングはどのように動作しますか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtc-%e3%81%ae%e3%82%b7%e3%82%b0%e3%83%8a%e3%83%aa%e3%83%b3%e3%82%b0%e3%81%af%e3%81%a9%e3%81%ae%e3%82%88%e3%81%86%e3%81%ab%e5%8b%95%e4%bd%9c%e3%81%97%e3%81%be%e3%81%99%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTC は、Session Description Protocol と呼ばれる既存のプロトコルを使用しています。このプロトコルにより、2 つの WebRTC エージェントは、接続を確立するために必要なすべての状態を共有します。このプロトコル自体は、読んで理解するのは簡単です。&#xA;複雑なのは、WebRTC がこのプロトコルに入力するすべての値を理解することです。&lt;/p&gt;&#xA;&lt;p&gt;このプロトコルは WebRTC 固有のものではありません。WebRTC の話をしなくても、まず Session Description Protocol を学びます。WebRTC はこのプロトコルのサブセットを実際に利用するだけなので、ここでは必要なものだけを取り上げます。&#xA;プロトコルを理解した後は、WebRTC での応用的な使い方に進みます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;session-description-protocol-sdpとは&#34;&gt;&#xA;  &lt;em&gt;Session Description Protocol&lt;/em&gt; (SDP)とは？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#session-description-protocol-sdp%e3%81%a8%e3%81%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;SDP は、&lt;a href=&#34;https://tools.ietf.org/html/rfc8866&#34;&gt;RFC 8866&lt;/a&gt;で定義されています。SDP はキーと値で構成されるプロトコルで、各値の後には改行が入ります。これは、INI ファイルに似ています。&#xA;Session Description は、0 個以上のメディア記述を含みます。頭の中では、Session Description にメディア記述の配列が含まれているようにモデル化できます。&lt;/p&gt;&#xA;&lt;p&gt;メディア記述は通常、メディアの 1 つのストリームに対応しています。つまり、3 つのビデオストリームと 2 つのオーディオトラックを持つ通話を記述したい場合、5 つのメディア記述が必要になります。&lt;/p&gt;&#xA;&lt;h3 id=&#34;sdpの読み方&#34;&gt;&#xA;  SDPの読み方&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sdp%e3%81%ae%e8%aa%ad%e3%81%bf%e6%96%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Session Description の各行は、1 つの文字で始まります。その後、等号が続きます。この等号以降が値となります。値が完了すると、改行されます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>接続</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/03-connecting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/03-connecting/</guid>
      <description>&lt;h1 id=&#34;接続&#34;&gt;&#xA;  接続&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%a5%e7%b6%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;なぜwebrtcには接続用の専用サブシステムが必要なのでしょうか&#34;&gt;&#xA;  なぜWebRTCには接続用の専用サブシステムが必要なのでしょうか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%81%aa%e3%81%9cwebrtc%e3%81%ab%e3%81%af%e6%8e%a5%e7%b6%9a%e7%94%a8%e3%81%ae%e5%b0%82%e7%94%a8%e3%82%b5%e3%83%96%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e3%81%8c%e5%bf%85%e8%a6%81%e3%81%aa%e3%81%ae%e3%81%a7%e3%81%97%e3%82%87%e3%81%86%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;現在導入されているほとんどのアプリケーションは、クライアント/サーバー接続を確立しています。クライアント/サーバー接続では、サーバーが安定した周知のトランスポートアドレスを持っている必要があります。クライアントはサーバーにコンタクトし、サーバーはそれに応答します。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCは、クライアント/サーバーモデルを使用せず、ピアツーピア（P2P）接続を確立します。P2P接続では、接続を作成するタスクが両方のピアに均等に分配されます。これは、WebRTCのトランスポートアドレス（IPとポート）は想定できず、セッション中に変更される可能性もあるためです。WebRTCはできる限りの情報を収集し、2つのWebRTCエージェント間の双方向通信を実現するために多大な努力をします。&lt;/p&gt;&#xA;&lt;p&gt;しかし、ピアツーピアの接続を確立するのは難しいことです。これらのエージェントは、直接接続されていない異なるネットワークに存在する可能性があります。直接的な接続性が存在する場合でも、別の問題が発生することがあります。クライアントが異なるプロトコル (UDP &amp;lt;-&amp;gt; TCP) や、IPバージョン (IPv4 &amp;lt;-&amp;gt; IPv6) を利用している場合もあります。&lt;/p&gt;&#xA;&lt;p&gt;このようにP2P接続の設定が難しいにもかかわらず、WebRTCには以下のような特徴があるため、従来のクライアント/サーバー技術よりも有利になります。&lt;/p&gt;&#xA;&lt;h3 id=&#34;帯域幅コストの削減&#34;&gt;&#xA;  帯域幅コストの削減&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%af%e5%9f%9f%e5%b9%85%e3%82%b3%e3%82%b9%e3%83%88%e3%81%ae%e5%89%8a%e6%b8%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;メディアの通信はピア間で直接行われるため、メディアを中継するために別のサーバーを用意する必要がありません。&lt;/p&gt;&#xA;&lt;h3 id=&#34;遅延の低減&#34;&gt;&#xA;  遅延の低減&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%81%85%e5%bb%b6%e3%81%ae%e4%bd%8e%e6%b8%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;通信は直接行われる方が速いです。ユーザーが全ての通信をサーバーを経由して行うと、通信速度が低下します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;安全なe2e通信&#34;&gt;&#xA;  安全なE2E通信&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%89%e5%85%a8%e3%81%aae2e%e9%80%9a%e4%bf%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;直接通信の方が安全です。ユーザーはサーバーを経由せずにデータを送信するので、ユーザーはサーバーがデータを解読しないことを信じる必要はありません。&lt;/p&gt;&#xA;&lt;h2 id=&#34;どうやって使うの&#34;&gt;&#xA;  どうやって使うの？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%81%a9%e3%81%86%e3%82%84%e3%81%a3%e3%81%a6%e4%bd%bf%e3%81%86%e3%81%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;上記のプロセスは、Interactive Connectivity Establishment (&lt;a href=&#34;https://tools.ietf.org/html/rfc8445&#34;&gt;ICE&lt;/a&gt;)と呼ばれています。WebRTCよりも前のプロトコルです。&lt;/p&gt;&#xA;&lt;p&gt;ICEは、2つのICE Agent間の通信に最適な方法を見つけようとするプロトコルです。各ICEエージェントは、到達可能な方法を公開しており、これを候補と呼びます。候補とは、基本的に、相手が到達できると考えられるエージェントのトランスポートアドレスです。ICEは、候補の中から最適な組み合わせを決定します。&lt;/p&gt;&#xA;&lt;p&gt;ICEの実際のプロセスについては、本章の後半で詳しく説明します。WebRTC がネットワークにおけるどのような挙動を克服しようとしているかを理解すると、ICEが存在する理由を理解できます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ネットワークの現実的な制約&#34;&gt;&#xA;  ネットワークの現実的な制約&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%8d%e3%83%83%e3%83%88%e3%83%af%e3%83%bc%e3%82%af%e3%81%ae%e7%8f%be%e5%ae%9f%e7%9a%84%e3%81%aa%e5%88%b6%e7%b4%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ICEは、実世界のネットワークの制約を克服するためのものです。解決策を探る前に、実際の問題点について説明します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;同じネットワークにいない&#34;&gt;&#xA;  同じネットワークにいない&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%8c%e3%81%98%e3%83%8d%e3%83%83%e3%83%88%e3%83%af%e3%83%bc%e3%82%af%e3%81%ab%e3%81%84%e3%81%aa%e3%81%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;ほとんどの場合、相手の WebRTC エージェントは同じネットワーク内にいるとは限りません。典型的な通話は、通常、直接接続されていない異なるネットワークにある2つのWebRTC Agent間で行われます。&lt;/p&gt;&#xA;&lt;p&gt;下の図は、公衆インターネットで接続された2つの異なるネットワークのグラフです。各ネットワークには2つのホストがあります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../images/03-two-networks.png&#34; alt=&#34;Two networks&#34; title=&#34;Two networks&#34;/&gt;&lt;/p&gt;&#xA;&lt;p&gt;同一ネットワーク内のホストは、非常に簡単に接続できます。 &lt;code&gt;192.168.0.1&lt;/code&gt; -&amp;gt; &lt;code&gt;192.168.0.2&lt;/code&gt; の間の通信は簡単にできます。これらの2つのホストは、外部の助けを借りずにお互いに接続できます。&lt;/p&gt;&#xA;&lt;p&gt;しかし、 &lt;code&gt;ルーターB&lt;/code&gt; を使っているホストは、 &lt;code&gt;ルーターA&lt;/code&gt; の後ろにあるものに直接アクセスする方法がありません。 &lt;code&gt;ルーターA&lt;/code&gt; の後ろにある &lt;code&gt;192.168.0.1&lt;/code&gt; と &lt;code&gt;ルーターB&lt;/code&gt; の後ろにある同じIPの違いをどうやって見分けるのでしょうか？これらはプライベートIPです。 &lt;code&gt;ルーターB&lt;/code&gt; を使用しているホストは、 &lt;code&gt;ルーターA&lt;/code&gt;  に直接トラフィックを送信できますが、リクエストはそこで終了します。&lt;code&gt;ルーターA&lt;/code&gt;はどのホストにメッセージを転送すべきか、どうやって知るのでしょうか?&lt;/p&gt;</description>
    </item>
    <item>
      <title>セキュリティ対策</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/04-securing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/04-securing/</guid>
      <description>&lt;h1 id=&#34;セキュリティ対策&#34;&gt;&#xA;  セキュリティ対策&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%82%bb%e3%82%ad%e3%83%a5%e3%83%aa%e3%83%86%e3%82%a3%e5%af%be%e7%ad%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;webrtcにはどんなセキュリティがありますか&#34;&gt;&#xA;  WebRTCにはどんなセキュリティがありますか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtc%e3%81%ab%e3%81%af%e3%81%a9%e3%82%93%e3%81%aa%e3%82%bb%e3%82%ad%e3%83%a5%e3%83%aa%e3%83%86%e3%82%a3%e3%81%8c%e3%81%82%e3%82%8a%e3%81%be%e3%81%99%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTCの接続はすべて認証され、暗号化されています。第三者があなたの送信内容を見たり、偽のメッセージを挿入したりすることはないので安心です。また、Session Description を生成したWebRTCエージェントが、通信相手であることも確かです。&lt;/p&gt;&#xA;&lt;p&gt;誰もこれらのメッセージに手を加えないことが非常に重要です。第3者が転送中の Session Description を読んでも問題ありません。しかし、WebRTCには Session Description が変更されることに対する保護がありません。攻撃者は ICE Candidates を変更し、証明書フィンガープリントを更新することで、あなたに対して中間者攻撃を行うことができます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;どのような仕組みになっているのですか&#34;&gt;&#xA;  どのような仕組みになっているのですか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%81%a9%e3%81%ae%e3%82%88%e3%81%86%e3%81%aa%e4%bb%95%e7%b5%84%e3%81%bf%e3%81%ab%e3%81%aa%e3%81%a3%e3%81%a6%e3%81%84%e3%82%8b%e3%81%ae%e3%81%a7%e3%81%99%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTCは、Datagram Transport Layer Security (&lt;a href=&#34;https://tools.ietf.org/html/rfc6347&#34;&gt;DTLS&lt;/a&gt;)とSecure Real-time Transport Protocol (&lt;a href=&#34;https://tools.ietf.org/html/rfc3711&#34;&gt;SRTP&lt;/a&gt;)という2つの既存のプロトコルを使用しています。&lt;/p&gt;&#xA;&lt;p&gt;DTLSは、セッションをネゴシエートした後、2つのピア間で安全にデータを交換できます。DTLSは、HTTPSを実現する技術であるTLSと兄弟関係にありますが、DTLSはトランスポート層としてTCPではなくUDPを使用します。つまり、このプロトコルは、信頼性の低い配信を処理しなければならないということです。SRTPは、特にメディアを安全に交換するために設計されています。DTLSの代わりにSRTPを使用することで、いくつかの最適化が可能になります。&lt;/p&gt;&#xA;&lt;p&gt;DTLSは最初に使用されます。ICEが提供する接続に対してハンドシェイクを行います。DTLSはクライアント/サーバー型のプロトコルなので、ハンドシェイクはどちらか一方が開始する必要があります。クライアント／サーバーの役割は、シグナリング時に選択されます。DTLSのハンドシェイクでは、双方が証明書を提示します。&#xA;ハンドシェイクが完了すると、この証明書は Session Description にある証明書のハッシュ値と比較されます。これは、ハンドシェイクが期待していたWebRTCエージェントで行われたことを確認するためです。これで、DTLS 接続が DataChannel の通信に使用できるようになります。&lt;/p&gt;&#xA;&lt;p&gt;SRTPセッションを作成するには、DTLSで生成されたキーを使用してセッションを初期化します。SRTPにはハンドシェイク機構がないため、外部の鍵を使ってブートストラップを行う必要があります。これが完了すると、SRTP で暗号化されたメディアを交換できます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;セキュリティ101&#34;&gt;&#xA;  セキュリティ101&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%82%bb%e3%82%ad%e3%83%a5%e3%83%aa%e3%83%86%e3%82%a3101&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;本章で紹介する技術を理解するには、まずこれらの用語を理解する必要があります。暗号は難しいテーマなので、他の資料も参考にしてください。&lt;/p&gt;&#xA;&lt;h3 id=&#34;暗号&#34;&gt;&#xA;  暗号&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9a%97%e5%8f%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;暗号とは、平文を暗号文に変換する一連の手順のことです。その後、暗号を元に戻すことができるため、暗号文を平文に戻すことができます。暗号は通常、その動作を変えるための鍵を持っています。別の用語では、暗号化と復号化があります。&lt;/p&gt;&#xA;&lt;p&gt;簡単な暗号はROT13です。各文字が13文字分前に移動します。暗号を解除するには、13文字を後ろに移動します。平文の&lt;code&gt;HELLO&lt;/code&gt;は暗号文の&lt;code&gt;URYYB&lt;/code&gt;になります。この場合、暗号はROT、鍵は13となります。&lt;/p&gt;&#xA;&lt;h3 id=&#34;平文暗号文&#34;&gt;&#xA;  平文/暗号文&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%b3%e6%96%87%e6%9a%97%e5%8f%b7%e6%96%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;平文とは暗号の入力である。暗号文とは、暗号の出力である。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ハッシュ&#34;&gt;&#xA;  ハッシュ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%8f%e3%83%83%e3%82%b7%e3%83%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;ハッシュは、ダイジェストを生成する一方通行のプロセスです。入力があると、毎回同じ出力を生成します。出力が可逆的でないことが重要です。出力があれば、その入力を特定できないようにする必要があります。ハッシュ化は、メッセージが改ざんされていないことを確認したい場合に有効です。&lt;/p&gt;&#xA;&lt;p&gt;単純なハッシュは、1文字おきに取るだけのもので、&lt;code&gt;HELLO&lt;/code&gt;は&lt;code&gt;HLO&lt;/code&gt;になります。「HELLO」が入力であると仮定することはできませんが、「HELLO」が一致することは確認できます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;公開鍵秘密鍵暗号方式&#34;&gt;&#xA;  公開鍵/秘密鍵暗号方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%ac%e9%96%8b%e9%8d%b5%e7%a7%98%e5%af%86%e9%8d%b5%e6%9a%97%e5%8f%b7%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;公開鍵/秘密鍵暗号方式は、DTLS と SRTP が使用する暗号の種類を説明します。このシステムでは、公開鍵と秘密鍵の2つの鍵を持ちます。公開鍵は、メッセージを暗号化するためのもので、共有しても安全です。&#xA;秘密鍵は復号化のためのもので、決して共有してはいけません。公開鍵で暗号化されたメッセージを復号化できる唯一の鍵です。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ディフィーヘルマン交換&#34;&gt;&#xA;  ディフィー・ヘルマン交換&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%87%e3%82%a3%e3%83%95%e3%82%a3%e3%83%bc%e3%83%98%e3%83%ab%e3%83%9e%e3%83%b3%e4%ba%a4%e6%8f%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;ディフィー・ヘルマン交換は、初対面の2人のユーザがインターネット上で安全に共有秘密を作成できます。ユーザ&lt;code&gt;A&lt;/code&gt;は、盗聴の心配をすることなく、ユーザ&lt;code&gt;B&lt;/code&gt;に秘密を送ることができます。これは、離散対数問題を解く難しさによります。&#xA;この仕組みを完全に理解する必要はありませんが、これがDTLSのハンドシェイクを可能にしていることを知っておくと役立ちます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>リアルタイム・ネットワーキング</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/05-real-time-networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/05-real-time-networking/</guid>
      <description>&lt;h1 id=&#34;リアルタイムネットワーキング&#34;&gt;&#xA;  リアルタイム・ネットワーキング&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%aa%e3%82%a2%e3%83%ab%e3%82%bf%e3%82%a4%e3%83%a0%e3%83%8d%e3%83%83%e3%83%88%e3%83%af%e3%83%bc%e3%82%ad%e3%83%b3%e3%82%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;リアルタイムコミュニケーションにおいてなぜネットワークが重要なのか&#34;&gt;&#xA;  リアルタイム・コミュニケーションにおいて、なぜネットワークが重要なのか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%aa%e3%82%a2%e3%83%ab%e3%82%bf%e3%82%a4%e3%83%a0%e3%82%b3%e3%83%9f%e3%83%a5%e3%83%8b%e3%82%b1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%ab%e3%81%8a%e3%81%84%e3%81%a6%e3%81%aa%e3%81%9c%e3%83%8d%e3%83%83%e3%83%88%e3%83%af%e3%83%bc%e3%82%af%e3%81%8c%e9%87%8d%e8%a6%81%e3%81%aa%e3%81%ae%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ネットワークは、リアルタイム通信を制限する要素です。理想的な世界では、帯域幅が無限にあり、パケットは瞬時に到着します。しかし、実際にはそうではありません。ネットワークには限界があり、いつでも条件が変わる可能性があります。また、ネットワークの状態を測定・観察することも難しい問題です。ハードウェア、ソフトウェア、そしてその構成によって、さまざまな挙動を示すことがあります。&lt;/p&gt;&#xA;&lt;p&gt;また、リアルタイムでの通信は、他の領域にはない問題です。Web制作者にとっては、ネットワークによってはWebサイトの表示が遅くなっても致命的ではありません。すべてのデータが届いていれば、ユーザーは満足です。WebRTCでは、データが遅れれば意味がありません。5秒前の電話会議の内容なんて誰も気にしません。そのため、リアルタイム通信システムを開発する際には、トレードオフの関係にならざるを得ません。制限時間は何秒か、どれだけ送れるか。&lt;/p&gt;&#xA;&lt;p&gt;本章では、データ通信とメディア通信の両方に適用される概念を説明します。後の章では、理論的な説明にとどまらず、WebRTCのメディアサブシステムとデータサブシステムがこれらの問題をどのように解決するのかを説明します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;難しくしているネットワークの属性は何ですか&#34;&gt;&#xA;  難しくしているネットワークの属性は何ですか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%a3%e3%81%97%e3%81%8f%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b%e3%83%8d%e3%83%83%e3%83%88%e3%83%af%e3%83%bc%e3%82%af%e3%81%ae%e5%b1%9e%e6%80%a7%e3%81%af%e4%bd%95%e3%81%a7%e3%81%99%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;すべてのネットワークで効果的に機能するコードは複雑です。多くの異なる要因があり、それらがすべて微妙に影響し合います。開発者が遭遇する最も一般的な問題は以下の通りです。&lt;/p&gt;&#xA;&lt;h4 id=&#34;帯域幅&#34;&gt;&#xA;  帯域幅&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%af%e5%9f%9f%e5%b9%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;帯域幅とは、特定のパスで転送できるデータの最大レートのことです。これは固定された数値ではないことを覚えておく必要があります。帯域幅は、利用者の増加（または減少）に伴い、経路に沿って変化します。&lt;/p&gt;&#xA;&lt;h4 id=&#34;送信時間とラウンドトリップタイム&#34;&gt;&#xA;  送信時間とラウンドトリップタイム&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%81%e4%bf%a1%e6%99%82%e9%96%93%e3%81%a8%e3%83%a9%e3%82%a6%e3%83%b3%e3%83%89%e3%83%88%e3%83%aa%e3%83%83%e3%83%97%e3%82%bf%e3%82%a4%e3%83%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;送信時間とは、パケットが到着するまでの時間のことです。帯域幅と同様、これも一定ではありません。&#xA;送信時間は、いつでも変動する可能性があります。&lt;/p&gt;&#xA;&lt;p&gt;伝送時間を計算するには、送信側と受信側の時計がミリ秒単位で同期している必要があります。&#xA;少しでもずれがあると、信頼性の低い伝送時間の測定になってしまいます。&#xA;WebRTCは非常に異質な環境で運用されているため、ホスト間の完全な時刻同期に頼ることはほとんど不可能です。&lt;/p&gt;&#xA;&lt;p&gt;ラウンドトリップタイムの測定は、不完全なクロック同期の回避策です。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCのピアは、分散したクロックで動作する代わりに、自身のタイムスタンプ &lt;code&gt;sendertime1&lt;/code&gt; を含む特別なパケットを送信します。&#xA;協力しているピアがそのパケットを受信し、タイムスタンプを送信者に反映します。&#xA;オリジナルの送信者は、反映された時間を得ると、現在の時間 &lt;code&gt;sendertime2&lt;/code&gt; からタイムスタンプ &lt;code&gt;sendertime1&lt;/code&gt; を引きます。&#xA;この時間差を &amp;ldquo;往復伝搬遅延 &amp;ldquo;といい、より一般的にはラウンドトリップタイムといいます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;rtt = sendertime2 - sendertime1&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;ラウンド・トリップ・タイムの半分は、送信時間の十分な近似値と考えられます。&#xA;この回避策には欠点がないわけではありません。&#xA;この方法では、パケットの送信と受信にかかる時間が同じであることを前提としています。&#xA;しかし、携帯電話ネットワークでは、送信と受信の動作が時間的に対称でない場合があります。&#xA;お使いの携帯電話のアップロード速度は、ほとんどの場合、ダウンロード速度よりも低いことにお気づきかもしれません。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;transmission_time = rtt/2&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;ラウンドトリップタイムの測定に関する技術的な内容は、&lt;a href=&#34;../06-media-communication/#%e5%8f%97%e4%bf%a1%e8%80%85%e3%83%ac%e3%83%9d%e3%83%bc%e3%83%88-receiver-reports&#34;&gt;RTCP送信者と受信者のレポートの章&lt;/a&gt;で詳しく説明されています。&lt;/p&gt;&#xA;&lt;h4 id=&#34;ジッター&#34;&gt;&#xA;  ジッター&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%82%b8%e3%83%83%e3%82%bf%e3%83%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;ジッターとは、「伝送時間」がパケットごとに異なることです。パケットが遅延しても、すぐに到着する可能性があります。&lt;/p&gt;&#xA;&lt;h4 id=&#34;パケットロス&#34;&gt;&#xA;  パケットロス&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%91%e3%82%b1%e3%83%83%e3%83%88%e3%83%ad%e3%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;パケットロスとは、メッセージが送信中に失われることです。パケットロスは安定している場合もあれば、急激に発生する場合もあります。&#xA;これは、衛星やWi-Fiなどのネットワークの種類に起因します。衛星やWi-Fiなどのネットワークの種類に起因する場合もあれば、通信中のソフトウェアに起因する場合もあります。&lt;/p&gt;&#xA;&lt;h4 id=&#34;最大伝送単位&#34;&gt;&#xA;  最大伝送単位&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%80%e5%a4%a7%e4%bc%9d%e9%80%81%e5%8d%98%e4%bd%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;最大伝送容量とは、1つのパケットの大きさの制限のことです。ネットワークでは、1つの巨大なメッセージを送信することはできません。プロトコルレベルでは、メッセージを複数の小さなパケットに分割する必要があるかもしれません。&lt;/p&gt;&#xA;&lt;p&gt;MTUは、どのようなネットワーク経路をとるかによっても異なります。&lt;a href=&#34;https://tools.ietf.org/html/rfc1191&#34;&gt;Path MTU Discovery&lt;/a&gt;のようなプロトコルを使用して、送信可能な最大のパケットサイズを把握できます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;輻輳-ふくそう&#34;&gt;&#xA;  輻輳 (ふくそう)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bc%bb%e8%bc%b3-%e3%81%b5%e3%81%8f%e3%81%9d%e3%81%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;輻輳（ふくそう）とは、ネットワークの限界に達した状態のことです。これは通常、現在のルートが処理できる帯域のピークに達したことが原因です。また、ISPが設定した1時間ごとの制限のように、オペレータが課すものもあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>メディア・コミュニケーション</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/06-media-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/06-media-communication/</guid>
      <description>&lt;h1 id=&#34;メディアコミュニケーション&#34;&gt;&#xA;  メディア・コミュニケーション&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%a1%e3%83%87%e3%82%a3%e3%82%a2%e3%82%b3%e3%83%9f%e3%83%a5%e3%83%8b%e3%82%b1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;webrtcのメディア通信では何ができるのですか&#34;&gt;&#xA;  WebRTCのメディア通信では何ができるのですか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtc%e3%81%ae%e3%83%a1%e3%83%87%e3%82%a3%e3%82%a2%e9%80%9a%e4%bf%a1%e3%81%a7%e3%81%af%e4%bd%95%e3%81%8c%e3%81%a7%e3%81%8d%e3%82%8b%e3%81%ae%e3%81%a7%e3%81%99%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTCでは、オーディオやビデオのストリームを無制限に送受信できます。これらのストリームは、通話中にいつでも追加・削除できます。これらのストリームはすべて独立していることもあれば、まとめて送信することもできます。例えば、自分のデスクトップのビデオフィードを送信し、ウェブカムからのオーディオ／ビデオを含めることができます。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCプロトコルは、コーデックに依存しません。基礎となるトランスポートは、まだ存在しないものも含めて、すべてをサポートしています。ただし、通信相手であるWebRTCエージェントが、それを受け入れるために必要なツールを持っていない場合もあります。&lt;/p&gt;&#xA;&lt;p&gt;また、WebRTCは、動的なネットワーク状況に対応できるように設計されています。通話中に帯域が増えたり減ったりすることがあります。また、突然パケットロスが多発することもあります。WebRTCはこのような状況にも対応できるように設計されています。WebRTCはネットワークの状態に対応し、利用可能なリソースで最高の体験を提供しようとします。&lt;/p&gt;&#xA;&lt;h2 id=&#34;どのような仕組みになっているのですか&#34;&gt;&#xA;  どのような仕組みになっているのですか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%81%a9%e3%81%ae%e3%82%88%e3%81%86%e3%81%aa%e4%bb%95%e7%b5%84%e3%81%bf%e3%81%ab%e3%81%aa%e3%81%a3%e3%81%a6%e3%81%84%e3%82%8b%e3%81%ae%e3%81%a7%e3%81%99%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTCは、&lt;a href=&#34;https://tools.ietf.org/html/rfc3550#section-6.4&#34;&gt;RFC 3550&lt;/a&gt;で定義されている2つの既存のプロトコルRTPとRTCPを使用しています。&lt;/p&gt;&#xA;&lt;p&gt;RTP（Real-time Transport Protocol）は、メディアを伝送するプロトコルです。動画をリアルタイムに配信することを目的に設計されています。遅延や信頼性に関するルールは規定されていませんが、それらを実装するためのツールが提供されています。RTPはストリームを提供し、1つの接続で複数のメディアフィードを実行できます。また、メディアパイプラインに供給するために必要な、タイミングや順序の情報も提供します。&lt;/p&gt;&#xA;&lt;p&gt;RTCP（RTP Control Protocol）は、コールに関するメタデータを通信するためのプロトコルです。このフォーマットは非常に柔軟で、必要なメタデータを追加できます。通話に関する統計情報を通信するために使用されます。また、パケットロスの処理や輻輳制御の実装にも使用されます。これにより、変化するネットワークの状況に対応するために必要な双方向の通信が可能になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;レイテンシー-vs-クオリティ&#34;&gt;&#xA;  レイテンシー vs クオリティ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%ac%e3%82%a4%e3%83%86%e3%83%b3%e3%82%b7%e3%83%bc-vs-%e3%82%af%e3%82%aa%e3%83%aa%e3%83%86%e3%82%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;リアルタイムメディアは、遅延と品質のトレードオフの関係にあります。遅延を許容すればするほど、高品質な映像が期待できます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;現実の制約&#34;&gt;&#xA;  現実の制約&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8f%be%e5%ae%9f%e3%81%ae%e5%88%b6%e7%b4%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;これらの制約は、すべて現実世界の制約に起因するもので、お客様が克服しなければならないネットワークの特性です。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ビデオは複雑&#34;&gt;&#xA;  ビデオは複雑&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%93%e3%83%87%e3%82%aa%e3%81%af%e8%a4%87%e9%9b%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;動画の転送は簡単ではありません。30分の非圧縮720 8bitビデオを保存するには、約110Gb必要です。この数字では、4人での電話会議は不可能です。もっと小さくする方法が必要ですが、その答えは映像の圧縮です。しかし、これにはデメリットもあります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ビデオ101&#34;&gt;&#xA;  ビデオ101&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%93%e3%83%87%e3%82%aa101&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ここでは、動画圧縮について詳しく説明しませんが、RTPがなぜこのように設計されているのかを理解するには十分です。動画圧縮とは、動画を新しいフォーマットにエンコードすることで、同じ動画をより少ないビット数で表現することです。&lt;/p&gt;&#xA;&lt;h3 id=&#34;非可逆圧縮と可逆圧縮&#34;&gt;&#xA;  非可逆圧縮と可逆圧縮&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%9e%e5%8f%af%e9%80%86%e5%9c%a7%e7%b8%ae%e3%81%a8%e5%8f%af%e9%80%86%e5%9c%a7%e7%b8%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;動画のエンコードは、ロスレス（情報が失われない）とロッシー（情報が失われる可能性がある）の2種類があります。ロスレス圧縮の場合、相手に送るデータ量が多くなり、ストリームの遅延が大きくなったり、パケットの損失が多くなるため、RTPでは映像の品質が悪くなってもロッシー圧縮を行うのが一般的です。&lt;/p&gt;&#xA;&lt;h3 id=&#34;イントラフレームとインターフレームの圧縮&#34;&gt;&#xA;  イントラフレームとインターフレームの圧縮&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%82%a4%e3%83%b3%e3%83%88%e3%83%a9%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e3%81%a8%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e3%81%ae%e5%9c%a7%e7%b8%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;動画の圧縮には2種類あります。1つ目はイントラフレームです。フレーム内圧縮では、1つのビデオフレームを記述するためのビットを削減します。静止画の圧縮にも同じ手法が使われており、JPEG圧縮法などがあります。&lt;/p&gt;&#xA;&lt;p&gt;2つ目は、フレーム間圧縮です。動画は多くの画像で構成されているので、同じ情報を2度送らない方法を考えます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;フレーム間の種類&#34;&gt;&#xA;  フレーム間の種類&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e9%96%93%e3%81%ae%e7%a8%ae%e9%a1%9e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;フレームには3つの種類があります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;I-Frame&lt;/strong&gt; - 完全な画像で、何もなくてもデコードできます。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;P-Frame&lt;/strong&gt; - 部分的な画像で、前の画像を修正したもの。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;B-Frame&lt;/strong&gt; - 部分的な画像で、以前の画像と未来の画像を組み合わせたもの。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;3つのフレームタイプを視覚化すると以下のようになります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../images/06-frame-types.png&#34; alt=&#34;Frame types&#34; title=&#34;Frame types&#34;/&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;動画はデリケート&#34;&gt;&#xA;  動画はデリケート&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8b%95%e7%94%bb%e3%81%af%e3%83%87%e3%83%aa%e3%82%b1%e3%83%bc%e3%83%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;動画の圧縮は非常にステートフルであり、インターネットでの転送は困難です。I-Frameの一部が失われるとどうなるのか？P-Frameはどうやって修正すべき箇所を知るのでしょうか？映像圧縮がより複雑になるにつれ、この問題はさらに深刻になっています。幸いなことに、RTPとRTCPには解決策があります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;rtp&#34;&gt;&#xA;  RTP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rtp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;パケットフォーマット&#34;&gt;&#xA;  パケットフォーマット&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%91%e3%82%b1%e3%83%83%e3%83%88%e3%83%95%e3%82%a9%e3%83%bc%e3%83%9e%e3%83%83%e3%83%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;すべてのRTPパケットは、以下のような構造になっています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>データ・コミュニケーション</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/07-data-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/07-data-communication/</guid>
      <description>&lt;h1 id=&#34;データコミュニケーション&#34;&gt;&#xA;  データ・コミュニケーション&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%87%e3%83%bc%e3%82%bf%e3%82%b3%e3%83%9f%e3%83%a5%e3%83%8b%e3%82%b1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;webrtcのデータ通信で何が得られるのか&#34;&gt;&#xA;  WebRTCのデータ通信で何が得られるのか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtc%e3%81%ae%e3%83%87%e3%83%bc%e3%82%bf%e9%80%9a%e4%bf%a1%e3%81%a7%e4%bd%95%e3%81%8c%e5%be%97%e3%82%89%e3%82%8c%e3%82%8b%e3%81%ae%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTCは、データ通信のためのデータチャンネルを提供します。2つのピアの間では、65,534個のデータチャンネルを開くことができます。&#xA;データチャンネルはデータグラムをベースにしており、それぞれに耐久性の設定があります。デフォルトでは、各データチャネルには順序通りの配信が保証されています。&lt;/p&gt;&#xA;&lt;p&gt;メディアの観点からWebRTCにアプローチしている場合、データチャネルは無駄に思えるかもしれません。HTTP や WebSocket を使用することができるのに、なぜこのようなサブシステム全体が必要なのでしょうか？&lt;/p&gt;&#xA;&lt;p&gt;データチャネルの本当の強みは、UDP のように順序のない、または損失のある配信を行うように設定できることです。&#xA;これは、低レイテンシーでハイパフォーマンスの場合に必要です。バックプレッシャーを測定し、ネットワークがサポートする量だけを送信できます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;webrtcはどのように動作するのですか&#34;&gt;&#xA;  WebRTCはどのように動作するのですか？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtc%e3%81%af%e3%81%a9%e3%81%ae%e3%82%88%e3%81%86%e3%81%ab%e5%8b%95%e4%bd%9c%e3%81%99%e3%82%8b%e3%81%ae%e3%81%a7%e3%81%99%e3%81%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTCは、&lt;a href=&#34;https://tools.ietf.org/html/rfc4960&#34;&gt;RFC 4960&lt;/a&gt;で定義されているSCTP(Stream Control Transmission Protocol)を使用しています。SCTPはトランスポート層のプロトコルで、TCPやUDPの代替となることを目的としています。WebRTCでは、DTLS接続上で動作するアプリケーション層のプロトコルとして使用しています。&lt;/p&gt;&#xA;&lt;p&gt;SCTPはストリームを提供し、各ストリームは独立して設定できます。WebRTCのデータチャネルは、それらを薄く抽象化したものに過ぎません。耐久性や順序に関する設定は、そのままSCTPエージェントに渡されます。&lt;/p&gt;&#xA;&lt;p&gt;データチャネルには、チャネルラベルなど、SCTPでは表現できない機能があります。この問題を解決するために、WebRTCは&lt;a href=&#34;https://tools.ietf.org/html/rfc8832&#34;&gt;RFC 8832&lt;/a&gt;で定義されているDCEP（Data Channel Establishment Protocol）を使用します。DCEPでは、通信を行うためのメッセージを定義しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;dcep&#34;&gt;&#xA;  DCEP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dcep&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DCEPには、&lt;code&gt;DATA_CHANNEL_OPEN&lt;/code&gt;と&lt;code&gt;DATA_CHANNEL_ACK&lt;/code&gt;の2つのメッセージしかありません。データチャネルが開かれるたびに、リモートはackで応答する必要があります。&lt;/p&gt;&#xA;&lt;h3 id=&#34;data_channel_open&#34;&gt;&#xA;  DATA_CHANNEL_OPEN&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data_channel_open&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;このメッセージは、チャネルを開くことを望む WebRTC エージェントによって送信されます。&lt;/p&gt;&#xA;&lt;h4 id=&#34;パケットフォーマット&#34;&gt;&#xA;  パケットフォーマット&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%91%e3%82%b1%e3%83%83%e3%83%88%e3%83%95%e3%82%a9%e3%83%bc%e3%83%9e%e3%83%83%e3%83%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; 0                   1                   2                   3&#xA; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|  Message Type |  Channel Type |            Priority           |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|                    Reliability Parameter                      |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|         Label Length          |       Protocol Length         |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;\                                                               \&#xA;/                             Label                             /&#xA;\                                                               \&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;\                                                               \&#xA;/                            Protocol                           /&#xA;\                                                               \&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;メッセージタイプ&#34;&gt;&#xA;  メッセージタイプ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%a1%e3%83%83%e3%82%bb%e3%83%bc%e3%82%b8%e3%82%bf%e3%82%a4%e3%83%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;メッセージタイプは、&lt;code&gt;0x03&lt;/code&gt;の静的な値です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>応用WebRTC</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/08-applied-webrtc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/08-applied-webrtc/</guid>
      <description>&lt;h1 id=&#34;webrtcの応用&#34;&gt;&#xA;  WebRTCの応用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtc%e3%81%ae%e5%bf%9c%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;WebRTCの仕組みがわかったところで、いよいよWebRTCを使って構築してみましょう。この章では、WebRTC を使って人々が何をどのように構築しているかを探り、WebRTC で起こっている興味深いことをすべて学びます。WebRTC のパワーにはコストがかかります。プロダクショングレードの WebRTC サービスを構築することは困難です。本章では、そのような課題にぶつかる前に、その課題を説明します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ユースケース別&#34;&gt;&#xA;  ユースケース別&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%a6%e3%83%bc%e3%82%b9%e3%82%b1%e3%83%bc%e3%82%b9%e5%88%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebRTCは、Webブラウザ上で会議を行うための技術に過ぎないと多くの人が考えています。しかし、それだけではありません。&#xA;WebRTCはさまざまなユースケースに利用されています。常に新しいユースケースが登場しています。この章では、一般的なユースケースをいくつか挙げ、WebRTC がそれらにどのような変革をもたらしているかを説明します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;会議&#34;&gt;&#xA;  会議&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%9a%e8%ad%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;会議は WebRTC の最初のユースケースです。このプロトコルには、他のプロトコルがブラウザで提供していないいくつかの必要な機能が含まれています。WebSocket で会議システムを構築しても、最適な条件であれば動作するかもしれません。現実のネットワーク環境で展開できるものを求めるのであれば、WebRTC が最適な選択です。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCは、メディアの輻輳制御とアダプティブ・ビットレートを提供します。ネットワークの状況が変化しても、ユーザーは最高の体験を得ることができます。開発者は、これらの条件を測定するために追加のコードを書く必要もありません。&lt;/p&gt;&#xA;&lt;p&gt;参加者は、複数のストリームを送受信できます。また、それらのストリームはいつでも追加・削除できます。コーデックもネゴシエートされます。これらの機能はすべてブラウザが提供するもので、開発者がカスタムコードを書く必要はありません。&lt;/p&gt;&#xA;&lt;p&gt;また、会議にはデータチャンネルの利点もあります。ユーザーはメタデータを送信したり、ドキュメントを共有できます。信頼性よりもパフォーマンスが必要な場合は、複数のストリームを作成して設定できます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;放送&#34;&gt;&#xA;  放送&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%be%e9%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;放送業界では、WebRTC を利用した新しいプロジェクトが数多く登場しています。このプロトコルは、メディアの発行者と消費者の両方にとって多くの利点があります。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCはブラウザ上で動作するため、ユーザーは簡単に動画を公開できます。また、ユーザーが新しいクライアントをダウンロードする必要もありません。&#xA;ウェブブラウザがあれば、どんなプラットフォームでも動画を公開できます。パブリッシャーは、複数のトラックを送信し、いつでもそれらを修正／削除できます。これは、1つの接続につき1つのオーディオトラックと1つのビデオトラックしか許可されていなかった従来のプロトコルに比べて、大きな進歩です。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCは、開発者が遅延と品質のトレードオフをより細かくコントロールできるようにします。遅延が一定の閾値を超えないことがより重要な可能性があり、多少のデコードアーチファクトは許容したいと思うでしょう。メディアが到着したらすぐに再生するようにビューアを設定できます。TCP上で動作する他のプロトコルでは、これは簡単ではありません。ブラウザでは、データを要求してそれで終わりです。&lt;/p&gt;&#xA;&lt;h3 id=&#34;リモートアクセス&#34;&gt;&#xA;  リモートアクセス&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;リモートアクセスとは、WebRTC を使って他のコンピュータに遠隔でアクセスすることです。リモートホストを完全に制御することもできますし、単一のアプリケーションだけを制御することもできます。 これは、ローカルのハードウェアでは処理できないような、計算量の多いタスクを実行するのに適しています。例えば、新しいビデオゲームやCADソフトウェアの実行などです。WebRTCは、3つの方法でこの分野に革命をもたらしました。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCは、世界的にルーティングされていないホストへのリモートアクセスに使用できます。NATトラバーサルを使えば、STUN経由でしか利用できないコンピュータにアクセスできます。これは、セキュリティやプライバシーの面でも優れています。ユーザーは、ビデオをインジェストや「ジャンプボックス」に通す必要がありません。また、NATトラバーサルは導入を容易にします。ポートフォワーディングや固定IPの設定を事前に心配する必要がありません。&lt;/p&gt;&#xA;&lt;p&gt;このシナリオでは、データチャネルも非常に強力です。最新のデータだけを受け付けるように設定できます。TCPの場合、Head-of-lineブロッキングが発生する危険性があります。古いマウスクリックやキープレスが遅れて到着すると、後続のデータが受け入れられなくなります。&#xA;WebRTCのデータチャネルはこの問題に対処するように設計されており、失われたパケットの再試行を行わないように設定できます。また、バックプレッシャを測定して、ネットワークがサポートする以上のデータを送信していないことを確認することもできます。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCがブラウザで利用できるようになったことで、生活の質が大きく向上しました。セッションを開始するために、専用のクライアントをダウンロードする必要はありません。WebRTCを搭載したクライアントはますます増えており、スマートテレビには完全なウェブブラウザが搭載されています。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ファイル共有と検閲回避&#34;&gt;&#xA;  ファイル共有と検閲回避&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e5%85%b1%e6%9c%89%e3%81%a8%e6%a4%9c%e9%96%b2%e5%9b%9e%e9%81%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;ファイル共有と検閲回避は全く異なる問題です。しかし、WebRTCはこの2つの問題を同じように解決します。それは、どちらも簡単に利用でき、ブロックするのが難しくなるということです。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCが解決する最初の問題は、クライアントの獲得です。ファイル共有ネットワークに参加するには、クライアントをダウンロードする必要があります。ネットワークが分散されていても、まずクライアントを入手する必要があります。 制限されたネットワークでは、ダウンロードはしばしばブロックされます。ダウンロードできたとしても、ユーザーがクライアントをインストール/実行できない場合もあります。WebRTCはすべてのWebブラウザで利用可能なので、すぐに利用できます。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCが解決する2つ目の問題は、トラフィックがブロックされることです。ファイル共有や検閲回避を目的としたプロトコルを使用している場合、それをブロックするのは非常に簡単です。 WebRTCは汎用プロトコルなので、これをブロックするとすべての人に影響が及びます。WebRTCをブロックすると、ネットワークの他のユーザーが電話会議に参加できなくなる可能性があります。&lt;/p&gt;&#xA;&lt;h3 id=&#34;iot&#34;&gt;&#xA;  IoT&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#iot&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;IoTにはいくつかの異なるユースケースがあります。多くの人にとって、これはネットワークに接続されたセキュリティカメラを意味します。WebRTC を使用して、携帯電話やブラウザなどの他の WebRTC ピアにビデオをストリーミングできます。また、デバイスを接続してセンサーデータを交換するというユースケースもあります。LANに接続された2つのデバイスで、気候、騒音、光の測定値を交換できます。&lt;/p&gt;&#xA;&lt;p&gt;WebRTCは、従来のビデオストリームプロトコルに比べて、プライバシーの面で非常に優れています。WebRTCはP2P接続をサポートしているので、カメラはビデオを直接ブラウザに送信できます。ビデオがサードパーティのサーバーに送られる必要はありません。ビデオが暗号化されていても、攻撃者は通話のメタデータから推測できます。&lt;/p&gt;&#xA;&lt;p&gt;相互運用性は、IoT分野でのもう一つの利点です。WebRTCは、C#、C++、C、Go、Java、Python、Rust、TypeScriptなど、たくさんの異なる言語で利用できます。つまり、自分に最適な言語を使うことができるのです。また、2つの異なるクライアントを接続するために、独自のプロトコルやフォーマットを使用する必要もありません。&lt;/p&gt;&#xA;&lt;h3 id=&#34;メディアプロトコルブリッジング&#34;&gt;&#xA;  メディアプロトコルブリッジング&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%a1%e3%83%87%e3%82%a3%e3%82%a2%e3%83%97%e3%83%ad%e3%83%88%e3%82%b3%e3%83%ab%e3%83%96%e3%83%aa%e3%83%83%e3%82%b8%e3%83%b3%e3%82%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;既存のハードウェアとソフトウェアで動画を作成しているが、まだアップグレードできない。ユーザーが動画を見るために独自のクライアントをダウンロードすることを期待するのは不満です。そこで、WebRTC ブリッジを導入します。ブリッジは2つのプロトコルを変換するので、ユーザーは従来のセットアップでブラウザを使用できます。&lt;/p&gt;&#xA;&lt;p&gt;開発者がブリッジするフォーマットの多くは、WebRTCと同じプロトコルを使用しています。SIPは一般的にWebRTCで公開されており、ユーザーはブラウザから電話をかけることができます。RTSPは、多くのレガシーセキュリティカメラで使用されています。どちらも同じ基本プロトコル（RTPとSDP）を使用しているので、計算コストをかけずに実行できます。ブリッジが必要なのは、WebRTC固有の機能を追加したり削除したりする場合だけです。&lt;/p&gt;&#xA;&lt;h3 id=&#34;データプロトコルブリッジング&#34;&gt;&#xA;  データプロトコルブリッジング&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%87%e3%83%bc%e3%82%bf%e3%83%97%e3%83%ad%e3%83%88%e3%82%b3%e3%83%ab%e3%83%96%e3%83%aa%e3%83%83%e3%82%b8%e3%83%b3%e3%82%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Web ブラウザは、限られたプロトコルしか使用できません。使えるのは、HTTP、WebSocket、WebRTC、QUIC です。それ以外のプロトコルに接続するには、プロトコルブリッジを使用する必要があります。プロトコルブリッジとは、外国のトラフィックをブラウザがアクセスできるものに変換するサーバーのことです。よくある例は、ブラウザからSSHを使ってサーバーにアクセスすることです。WebRTCのデータチャネルには、競合製品と比べて2つの利点があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>デバッグ</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/09-debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/09-debugging/</guid>
      <description>&lt;h1 id=&#34;デバッグ&#34;&gt;&#xA;  デバッグ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%87%e3%83%90%e3%83%83%e3%82%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;WebRTCのデバッグは、非常に困難な作業です。たくさんの可動部品があり、それらがすべて独立して壊れる可能性があります。注意していないと、間違ったものを探すために何週間もの時間を費やすことになります。やっと壊れた部品を見つけても、その原因を理解するためには、少し勉強する必要があります。&lt;/p&gt;&#xA;&lt;p&gt;本章では、WebRTC をデバッグするための心構えを身につけます。問題をどのように分解するかを説明します。問題を把握した後は、一般的なデバッグツールを簡単にご紹介します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;問題の切り分け&#34;&gt;&#xA;  問題の切り分け&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%95%8f%e9%a1%8c%e3%81%ae%e5%88%87%e3%82%8a%e5%88%86%e3%81%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;デバッグの際には、問題がどこから発生しているのかを切り分ける必要があります。問題の始まりから始めてみましょう。&lt;/p&gt;&#xA;&lt;h3 id=&#34;シグナリングの失敗&#34;&gt;&#xA;  シグナリングの失敗&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%82%b7%e3%82%b0%e3%83%8a%e3%83%aa%e3%83%b3%e3%82%b0%e3%81%ae%e5%a4%b1%e6%95%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;ネットワーキングの失敗&#34;&gt;&#xA;  ネットワーキングの失敗&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e3%83%8d%e3%83%83%e3%83%88%e3%83%af%e3%83%bc%e3%82%ad%e3%83%b3%e3%82%b0%e3%81%ae%e5%a4%b1%e6%95%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;netcatを使ってSTUNサーバーをテストします。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;20バイト&lt;/strong&gt;のバインディングリクエストパケットを準備します。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo -ne &amp;#34;\x00\x01\x00\x00\x21\x12\xA4\x42TESTTESTTEST&amp;#34; | hexdump -C&#xA;00000000  00 01 00 00 21 12 a4 42  54 45 53 54 54 45 53 54  |....!..BTESTTEST|&#xA;00000010  54 45 53 54                                       |TEST|&#xA;00000014&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;の解釈を行います。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;0001&lt;/code&gt; はメッセージタイプ&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;00 00&lt;/code&gt; はデータセクションの長さです。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;21 12 a4 42&lt;/code&gt; はマジック・クッキーです。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;54 45 53 54 54 45 53 54 54 45 53 54&lt;/code&gt; (ASCIIでは &lt;code&gt;TESTTESTTEST&lt;/code&gt; とデコードされます)は12バイトのトランザクションIDです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>歴史</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/10-history-of-webrtc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/10-history-of-webrtc/</guid>
      <description>&lt;h1 id=&#34;歴史&#34;&gt;&#xA;  歴史&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%ad%b4%e5%8f%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;WebRTC を学ぶ際、開発者はその複雑さに苛立ちを覚えることがあります。WebRTC の機能が現在のプロジェクトとは無関係であることを知り、WebRTC がもっとシンプルであればと思うのです。問題は、使用例が人によって異なることです。リアルタイム通信には豊かな歴史があり、さまざまな人がさまざまなものを作ってきました。&lt;/p&gt;&#xA;&lt;p&gt;本章では、WebRTC を構成するプロトコルの開発者へのインタビューを掲載しています。&#xA;それぞれのプロトコルを構築する際の設計について洞察し、最後に WebRTC そのものについてのインタビューを行います。ソフトウェアの意図や設計を理解すれば、そのソフトウェアを使ってより効果的なシステムを構築することができます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;rtp&#34;&gt;&#xA;  RTP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rtp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;RTP および RTCP は、WebRTC のすべてのメディア伝送を担当するプロトコルです。1996年1月に&lt;a href=&#34;https://tools.ietf.org/html/rfc1889&#34;&gt;RFC 1889&lt;/a&gt;で定義されました。 著者の一人である&lt;a href=&#34;https://github.com/ronf&#34;&gt;Ron Frederick&lt;/a&gt;が自ら語ってくれるというのはとてもラッキーなことです。Ron は最近、RTPに影響を与えたプロジェクトである&lt;a href=&#34;https://github.com/ronf/nv&#34;&gt;Network Video tool&lt;/a&gt;を GitHub にアップロードしました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;彼自身の言葉です。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;1992年10月、私はIPマルチキャストをベースにしたネットワークビデオ会議ツールを書こうと思い、Sun VideoPixフレームグラバーカードの実験を始めました。このプログラムは、LBLで開発されたオーディオ会議ツール「vat」をモデルにしたもので、会議に参加するユーザーに同様の軽量なセッションプロトコルを使用し、特定のマルチキャストグループにデータを送り、他のグループメンバーからのトラフィックを監視するだけのものでした。&lt;/p&gt;&#xA;&lt;p&gt;このプログラムを成功させるためには、ネットワークに出す前にビデオデータを圧縮する必要がありました。私の目標は、家庭用ISDN回線の帯域幅である128kbps程度に収まる、見た目にも美しいデータストリームを作ることでした。さらに、その半分の帯域で見られるようなものを作りたかった。そのためには、画像サイズとフレームレートに応じて、約20倍の圧縮が必要でした。私はこの圧縮を実現し、使用した技術の特許を申請しました。これは後に特許&lt;a href=&#34;https://patents.google.com/patent/US5485212A&#34;&gt;US5485212A&lt;/a&gt;として認められました: 電話会議のためのソフトウェアビデオ圧縮。&lt;/p&gt;&#xA;&lt;p&gt;1992年11月初旬、私はビデオ会議ツール「nv」を（バイナリ形式で）インターネットコミュニティに公開しました。初期テストの後、 このツールを使って、 11月のインターネット技術タスクフォースの一部を世界中にビデオキャストしました。15カ国の約200のサブネットでこの放送を受信することができ、1週間のうちに約50～100人が「nv」を使ってビデオを受信しました。&lt;/p&gt;&#xA;&lt;p&gt;その後、オーストラリアの「NetWorkshop」、MCNCの「Packet Audio and Video」、スウェーデンの「MultiG Workshop on Distributed Virtual Realities」など、他の3つのワークショップやいくつかの小規模な会議でも「nv」を使ってインターネット全体に向けた放送が行われました。&lt;/p&gt;&#xA;&lt;p&gt;1993年2月には「nv」のソースコードを公開し、3月にはウェーブレットベースの圧縮方式を導入したバージョンを公開しました。1993年5月には、カラービデオにも対応しました。&lt;/p&gt;&#xA;&lt;p&gt;「nv」をはじめとするインターネット会議ツールのネットワークプロトコルは、インターネット技術タスクフォース（IETF）で標準化されたリアルタイム・トランスポート・プロトコル（RTP）をベースにしています。RFC &lt;a href=&#34;https://tools.ietf.org/html/rfc1889&#34;&gt;1889&lt;/a&gt;-&lt;a href=&#34;https://tools.ietf.org/html/rfc1890&#34;&gt;1890&lt;/a&gt;で最初に発表され、その後RFC &lt;a href=&#34;https://tools.ietf.org/html/rfc3550&#34;&gt;3550&lt;/a&gt;-&lt;a href=&#34;https://tools.ietf.org/html/rfc3551&#34;&gt;3551&lt;/a&gt;で改訂され、音声やビデオの特定フォーマットを伝送するためのプロファイルをカバーするさまざまな他のRFCも追加されました。&lt;/p&gt;&#xA;&lt;p&gt;その後、数年にわたって「nv」の開発が続けられ、多くのハードウェアプラットフォームやビデオキャプチャーデバイスにツールが移植されました。当時、インターネット上で会議を中継するための主要なツールの一つとして使われ続け、NASAからシャトルミッションのライブ中継に選ばれたこともある。&lt;/p&gt;&#xA;&lt;p&gt;1994年には、他社が開発したビデオ圧縮アルゴリズムを「nv」でサポートするようにした。これには、SunVideoビデオキャプチャカードがサポートするCellBフォーマットなどのハードウェア圧縮方式も含まれる。これにより、「nv」はCUSeeMeフォーマットでビデオを送信できるようになり、MacやPCでCUSeeMeを実行しているユーザーにビデオを送信できるようになりました。&lt;/p&gt;&#xA;&lt;p&gt;「nv」が最後に公開されたのは、1994年7月にリリースされた「3.3beta」だった。私は「nv」をRTPプロトコルのバージョン2に移行させることを目的とした「4.0alpha」のリリースに取り組んでいましたが、私が他のプロジェクトに移ったため、この作業は完了しませんでした。4.0αのコードは、&lt;a href=&#34;https://github.com/ronf/nv&#34;&gt;Network Video tool&lt;/a&gt;のアーカイブに含まれていますが、未完成であり、特にRTPv2のサポートが不完全であるなど、既知の問題があります。&lt;/p&gt;&#xA;&lt;p&gt;「nv」で提供されたフレームワークは、後にXerox PARCの「Jupiter multi-media MOO」プロジェクトにおけるビデオ会議の基礎となり、後にMicrosoftに買収されたスピンオフ企業「PlaceWare」の基礎となりました。また、このコードは、高帯域幅のイーサネットやATMネットワーク上でNTSC放送品質のビデオを送ることができる多くのハードウェアビデオ会議プロジェクトの基礎としても使われました。 また、このコードの一部は、ネットワークベースのビデオ録画・再生サービスである「Mediastore」のベースとしても使用しました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;ドラフトに参加していた他のメンバーの動機やアイデアは覚えていますか？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;私たちは皆、IPマルチキャストの研究者で、インターネット・マルチキャスト・バックボーン（通称MBONE）の構築に携わっていました。MBONEは、IPマルチキャストを最初に開発したスティーブ・デアリング、ヴァン・ジェイコブソン、スティーブ・キャスナーの3人によって作られました。スティーブ・デアリングと私はスタンフォード大学で同じ指導教官でしたが、スティーブはスタンフォード大学を辞めてXerox PARCで働くことになりました。私はインターンとしてXerox PARCでIPマルチキャスト関連のプロジェクトにひと夏を過ごし、スタンフォード大学在学中はパートタイムで、その後はフルタイムで働き続けました。ヴァン・ジェイコブソンとスティーブ・キャスナーは、ヘニング・シュルツリンと私と一緒に、初期のRTP RFCの4人の著者のうちの2人でした。私たちは皆、様々な形のオンラインコラボレーションを可能にするMBONEツールを開発していましたが、これらのツールが使用できる共通のベースプロトコルを作ろうとしたことがRTPにつながったのです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;マルチキャストはとても魅力的です。WebRTCは完全にユニキャストですが、その点について説明していただけますか？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;スタンフォード大学に入学してIPマルチキャストについて学ぶ前、私はコンピュータを使って人々が互いにコミュニケーションを取る方法について長い間研究してきました。私は80年代初頭にダイアルアップの掲示板システムを運営していましたが、そこでは人々がログオンしてお互いにメッセージを残すことができ、プライベートなもの（電子メールに相当するもの）とパブリックなもの（ディスカッショングループ）がありました。同じ頃、CompuServeというオンラインサービスの存在も知りました。CompuServeの優れた機能の一つに「CB Simulator」というものがあり、人々がリアルタイムで会話をすることができました。すべてテキストベースでしたが、本物のCBラジオのように「チャンネル」という概念があり、同じチャンネルにいる限り、複数の人が他の人の入力した内容を見ることができました。 私は、タイムシェアリングシステム上で動作する自作のCBを作り、そのシステム上のユーザーがリアルタイムにメッセージを送れるようにしました。実は、そのうちの1つのシステムは今でも稼働していて、30数年前に大学で一緒だった人たちと毎日のように会話をしているんですよ。&lt;/p&gt;&#xA;&lt;p&gt;しかし、スタンフォード大学でIPマルチキャストについて学んだとき、マルチキャストを使って真の「ラジオ」のようなものを手に入れることができるという考えに興味を持ちました。偶然にも、私がIPマルチキャストのコードを移植していたコンピュータは、サンの第一世代のSPARCステーションで、実は電話品質のオーディオハードウェアを内蔵していたのです。 マイクからの音をデジタル化して、内蔵スピーカー（またはヘッドフォン出力）で再生できるのです。そこで私が最初に考えたのは、IPマルチキャストを使ってその音声をリアルタイムでネットワーク上に送る方法を見つけ出し、テキストの代わりに実際の音声を使って「CBラジオ」に相当するものを作れないかということでした。&lt;/p&gt;&#xA;&lt;p&gt;コンピュータは一度に1つのオーディオストリームしか再生できないので、複数の人が話している場合には、再生する前に複数のオーディオストリームを数学的に1つに「ミックス」する必要があるなど、いくつか厄介な点がありましたが、オーディオサンプリングの仕組みを理解すれば、ソフトウェアですべて解決することができました。このオーディオアプリケーションがきっかけで、私はMBONEに取り組み、最終的には「nv」でオーディオからビデオへと移行しました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;プロトコルに含まれていないもので、追加しておけばよかったと思うものはありますか？ プロトコルの中で後悔していることはありますか？&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>FAQ</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/11-faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/11-faq/</guid>
      <description>&lt;h1 id=&#34;faq&#34;&gt;&#xA;  FAQ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#faq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;details &gt;&lt;summary&gt;なぜWebRTCはUDPを使うのですか？&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    &lt;p&gt;NATトラバーサルにはUDPが必要です。NATトラバーサルがなければ、P2P接続の確立をすることはできません。 UDPはTCPのような「配信保証」を提供していないので、WebRTCではユーザーレベルで提供しています。&lt;/p&gt;&#xA;&lt;p&gt;詳しくは &lt;a href=&#34;http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/03-connecting/&#34;&gt;接続&lt;/a&gt; をご覧ください&lt;/p&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;&lt;/details&gt;&#xA;&#xA;&lt;details &gt;&lt;summary&gt;データチャンネルはいくつまで持てますか？&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    ストリームの識別子が16ビットなので、65534チャンネルです。いつでも新しいものを閉じたり開いたりできます。&#xA;  &lt;/div&gt;&#xA;&lt;/details&gt;&#xA;&#xA;&lt;details &gt;&lt;summary&gt;WebRTCは帯域幅の制限がありますか？&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    DataChannels と RTP は共に輻輳制御を使用します。これは、WebRTC が帯域幅を積極的に測定し、最適な量を使用しようとすることを意味します。これは、接続を圧迫することなく、可能な限り多くのデータを送信するためのバランスです。&#xA;  &lt;/div&gt;&#xA;&lt;/details&gt;&#xA;&#xA;&lt;details &gt;&lt;summary&gt;バイナリデータの送信は可能ですか？&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    はい、DataChannelsでは、テキストとバイナリの両方のデータを送信できます。&#xA;  &lt;/div&gt;&#xA;&lt;/details&gt;&#xA;&#xA;&lt;details &gt;&lt;summary&gt;WebRTCのレイテンシーはどのくらいですか？&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    &lt;p&gt;チューニングされていないメディアでは、500ミリ秒以下が期待できます。もし、レイテンシーのために品質を犠牲にしても構わないのであれば、開発者は100ミリ秒以下を実現しています。&lt;/p&gt;&#xA;&lt;p&gt;DataChannelsは、&amp;ldquo;Partial-reliability &amp;ldquo;オプションをサポートしています。適切に設定されていれば、TCP TLS 接続よりも優れていることが示されています。&lt;/p&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;&lt;/details&gt;&#xA;&#xA;&lt;details &gt;&lt;summary&gt;なぜDataChannelsに順序付けされていない配信が必要なのでしょうか？&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    物体の位置情報など、新しい情報が古い情報を駆逐する場合や、各メッセージが他のメッセージから独立しており、回線の先頭でのブロック遅延を回避する必要がある場合などです。&#xA;  &lt;/div&gt;&#xA;&lt;/details&gt;&#xA;&#xA;&lt;details &gt;&lt;summary&gt;DataChannelでオーディオやビデオを送信できますか？&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    どんなデータでもDataChannelで送ることができます。ブラウザの場合、データをデコードしてメディアプレーヤーに渡してレンダリングするのはあなたの責任ですが、メディアチャンネルを使用する場合は自動的に行われます。&#xA;  &lt;/div&gt;&#xA;&lt;/details&gt;</description>
    </item>
    <item>
      <title>用語集</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/12-glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/12-glossary/</guid>
      <description>&lt;h1 id=&#34;用語集&#34;&gt;&#xA;  用語集&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e8%aa%9e%e9%9b%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ACK: Acknowledgment&lt;/li&gt;&#xA;&lt;li&gt;AVP: Audio and Video profile&lt;/li&gt;&#xA;&lt;li&gt;B-Frame: &lt;a href=&#34;../06-media-communication/#%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e9%96%93%e3%81%ae%e7%a8%ae%e9%a1%9e&#34;&gt;Bi-directional Predicted Frame&lt;/a&gt;. 部分的な画像で,以前の画像と未来の画像を組み合わせたもの&lt;/li&gt;&#xA;&lt;li&gt;DCEP: &lt;a href=&#34;../07-data-communication/#dcep&#34;&gt;Data Channel Establishment Protocol&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8832&#34;&gt;RFC 8832&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;DeMux: Demultiplexer&lt;/li&gt;&#xA;&lt;li&gt;DLSR: delay since last sender report&lt;/li&gt;&#xA;&lt;li&gt;DTLS: &lt;a href=&#34;../04-securing/#dtls&#34;&gt;Datagram Transport Layer Security&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6347&#34;&gt;RFC 6347&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;E2E: end-to-end&lt;/li&gt;&#xA;&lt;li&gt;FEC: &lt;a href=&#34;../06-media-communication/#%e5%89%8d%e6%96%b9%e8%aa%a4%e3%82%8a%e8%a8%82%e6%ad%a3-forward-error-correction&#34;&gt;Forward Error Correction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;FIR: &lt;a href=&#34;../06-media-communication/#full-intra-frame-request-fir%e3%81%a8picture-loss-indication-pli&#34;&gt;Full INTRA-frame Request&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;G.711: A narrowband audio codec&lt;/li&gt;&#xA;&lt;li&gt;GCC: &lt;a href=&#34;../06-media-communication/#google%e8%bc%bb%e8%bc%b3%e5%88%b6%e5%be%a1gcc&#34;&gt;Google Congestion Control&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-ietf-rmcat-gcc-02&#34;&gt;draft-ietf-rmcat-gcc-02&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;H.264: Advanced video coding for generic audiovisual services&lt;/li&gt;&#xA;&lt;li&gt;H.265: Conformance specification for ITU-T H.265 high efficiency video coding&lt;/li&gt;&#xA;&lt;li&gt;HEVC: High Efficiency Video Coding&lt;/li&gt;&#xA;&lt;li&gt;HTTP: Hypertext Transfer Protocol&lt;/li&gt;&#xA;&lt;li&gt;HTTPS: HTTP Over TLS 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc2818&#34;&gt;RFC 2818&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;I-Frame: &lt;a href=&#34;../06-media-communication/#%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e9%96%93%e3%81%ae%e7%a8%ae%e9%a1%9e&#34;&gt;Intra-coded Frame&lt;/a&gt;. 完全な画像で,何もなくてもデコードできる&lt;/li&gt;&#xA;&lt;li&gt;ICE: &lt;a href=&#34;../03-connecting/#ice&#34;&gt;Interactive Connectivity Establishment&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8445&#34;&gt;RFC 8445&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;INIT: Initiate&lt;/li&gt;&#xA;&lt;li&gt;IoT: Internet of Things&lt;/li&gt;&#xA;&lt;li&gt;IPv4: Internet Protocol, Version 4&lt;/li&gt;&#xA;&lt;li&gt;IPv6: Internet Protocol, Version 6&lt;/li&gt;&#xA;&lt;li&gt;ITU-T: International Telecommunication Union Telecommunication Standardization Sector&lt;/li&gt;&#xA;&lt;li&gt;JSEP: &lt;a href=&#34;../02-signaling/#session-description-protocol-sdp%e3%81%a8%e3%81%af&#34;&gt;JavaScript Session Establishment Protocol&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8829&#34;&gt;RFC 8829&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;MCU: &lt;a href=&#34;../08-applied-webrtc/#mcu&#34;&gt;Multi-point Conferencing Unit&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;mDNS: &lt;a href=&#34;../03-connecting/#mdns&#34;&gt;Multicast DNS&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6762&#34;&gt;RFC 6762&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;MITM: Man-In-The-Middle&lt;/li&gt;&#xA;&lt;li&gt;MTU: Maximum Transmission Unit&lt;/li&gt;&#xA;&lt;li&gt;MUX: Multiplexing&lt;/li&gt;&#xA;&lt;li&gt;NACK: Negative Acknowledgment&lt;/li&gt;&#xA;&lt;li&gt;NADA: &lt;a href=&#34;../06-media-communication/#%e5%b8%af%e5%9f%9f%e5%b9%85%e3%81%ae%e6%8e%a8%e5%ae%9a%e3%81%ae%e4%bb%a3%e6%9b%bf%e6%a1%88&#34;&gt;network-assisted dynamic adaptation&lt;/a&gt; 策定文書 &lt;a href=&#34;https://tools.ietf.org/html/draft-zhu-rmcat-nada-04&#34;&gt;draft-zhu-rmcat-nada-04&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;NAT: &lt;a href=&#34;../03-connecting/#nat%e3%83%9e%e3%83%83%e3%83%94%e3%83%b3%e3%82%b0&#34;&gt;Network Address Translation&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4787&#34;&gt;RFC 4787&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Opus: A totally open, royalty-free, highly versatile audio codec&lt;/li&gt;&#xA;&lt;li&gt;P-Frame: &lt;a href=&#34;../06-media-communication/#%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e9%96%93%e3%81%ae%e7%a8%ae%e9%a1%9e&#34;&gt;Predicted Frame&lt;/a&gt;. 部分的な画像で,前の画像を修正したもの&lt;/li&gt;&#xA;&lt;li&gt;P2P: peer-to-peer&lt;/li&gt;&#xA;&lt;li&gt;PLI: &lt;a href=&#34;../06-media-communication/#full-intra-frame-request-fir%e3%81%a8picture-loss-indication-pli&#34;&gt;Picture Loss Indication&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;PPID: &lt;a href=&#34;../07-data-communication/#%e3%83%9a%e3%82%a4%e3%83%ad%e3%83%bc%e3%83%89%e3%83%97%e3%83%ad%e3%83%88%e3%82%b3%e3%83%ab%e8%ad%98%e5%88%a5%e5%ad%90&#34;&gt;Payload Protocol Identifier&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;REMB: &lt;a href=&#34;../06-media-communication/#tmmbr-tmmbn-remb&#34;&gt;Receiver Estimated Maximum Bitrate&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;RFC: Request for Comments&lt;/li&gt;&#xA;&lt;li&gt;RMCAT: &lt;a href=&#34;../06-media-communication/#%e5%b8%af%e5%9f%9f%e5%b9%85%e3%81%ae%e6%8e%a8%e5%ae%9a%e5%80%a4%e3%81%ae%e7%94%9f%e6%88%90&#34;&gt;RTP Media Congestion Avoidance Techniques&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;RR: Receiver Report&lt;/li&gt;&#xA;&lt;li&gt;RTCP: &lt;a href=&#34;../10-history-of-webrtc/#rtp&#34;&gt;RTP Control Protocol&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc3550&#34;&gt;RFC 3550&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;RTP: &lt;a href=&#34;../10-history-of-webrtc/#rtp&#34;&gt;Real-time transport protocol&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc3550&#34;&gt;RFC 3550&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;RTT: Round-trip time&lt;/li&gt;&#xA;&lt;li&gt;SACK: Selective Acknowledgment&lt;/li&gt;&#xA;&lt;li&gt;SCReAM: &lt;a href=&#34;../06-media-communication/#%e5%b8%af%e5%9f%9f%e5%b9%85%e3%81%ae%e6%8e%a8%e5%ae%9a%e3%81%ae%e4%bb%a3%e6%9b%bf%e6%a1%88&#34;&gt;Self-Clocked Rate Adaptation for Multimedia defined&lt;/a&gt; 策定文書 &lt;a href=&#34;https://tools.ietf.org/html/draft-johansson-rmcat-scream-cc-05&#34;&gt;draft-johansson-rmcat-scream-cc-05&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;SCTP: &lt;a href=&#34;../07-data-communication/#sctp&#34;&gt;Stream Control Transmission Protocol&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4960&#34;&gt;RFC 4960&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;SDP: &lt;a href=&#34;../02-signaling/#session-description-protocol-sdp%e3%81%a8%e3%81%af&#34;&gt;Session Description Protocol&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8866&#34;&gt;RFC 8866&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;SFU: &lt;a href=&#34;../08-applied-webrtc/#%e9%81%b8%e6%8a%9e%e7%9a%84%e3%83%95%e3%82%a9%e3%83%af%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e3%83%a6%e3%83%8b%e3%83%83%e3%83%88-selective-forwarding-unit&#34;&gt;Selective Forwarding Unit&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;SR: Sender Report&lt;/li&gt;&#xA;&lt;li&gt;SRTP: &lt;a href=&#34;../04-securing/#srtp&#34;&gt;Secure Real-time Transport Protocol&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc3711&#34;&gt;RFC 3711&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;SSRC: Synchronization Source&lt;/li&gt;&#xA;&lt;li&gt;STUN: &lt;a href=&#34;../03-connecting/#stun&#34;&gt;Session Traversal Utilities for NAT&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8489&#34;&gt;RFC 8489&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;TCP: Transmission Control Protocol&lt;/li&gt;&#xA;&lt;li&gt;TLS: The Transport Layer Security 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8446&#34;&gt;RFC 8446&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;TMMBN: &lt;a href=&#34;../06-media-communication/#tmmbr-tmmbn-remb&#34;&gt;Temporary Maximum Media Stream Bit Rate Notification&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;TMMBR: &lt;a href=&#34;../06-media-communication/#tmmbr-tmmbn-remb&#34;&gt;Temporary Maximum Media Stream Bit Rate Request&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;TSN: &lt;a href=&#34;../07-data-communication/#%e3%83%88%e3%83%a9%e3%83%b3%e3%82%b9%e3%83%9f%e3%83%83%e3%82%b7%e3%83%a7%e3%83%b3%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9%e7%95%aa%e5%8f%b7&#34;&gt;Transmission Sequence Number&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;TURN: &lt;a href=&#34;../03-connecting/#turn&#34;&gt;Traversal Using Relays around NAT&lt;/a&gt; 策定文書 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8656&#34;&gt;RFC 8656&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;TWCC: &lt;a href=&#34;../06-media-communication/#%e3%83%88%e3%83%a9%e3%83%b3%e3%82%b9%e3%83%9d%e3%83%bc%e3%83%88%e3%83%af%e3%82%a4%e3%83%89%e8%bc%bb%e8%bc%b3%e5%88%b6%e5%be%a1-transport-wide-congestion-control&#34;&gt;Transport Wide Congestion Control&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;UDP: User Datagram Protocol&lt;/li&gt;&#xA;&lt;li&gt;VP8, VP9: Highly-efficient video compression technologies (video &amp;ldquo;codecs&amp;rdquo;) developed by the WebM Project. 誰もが利用可能なロイヤリティフリーのコーデック&lt;/li&gt;&#xA;&lt;li&gt;WebM: An open media file format designed for the web.&lt;/li&gt;&#xA;&lt;li&gt;WebRTC: Web Real-Time Communications. &lt;a href=&#34;https://www.w3.org/TR/webrtc/&#34;&gt;W3C WebRTC 1.0: Real-Time Communication Between Browsers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>参考文献</title>
      <link>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/13-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/webrtc-for-the-curious-kr/ja/docs/13-reference/</guid>
      <description>&lt;h1 id=&#34;参考文献&#34;&gt;&#xA;  参考文献&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;webrtcw3c&#34;&gt;&#xA;  WebRTC(W3C)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtcw3c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/webrtc/&#34;&gt;WebRTC 1.0: Real-Time Communication Between Browsers&lt;/a&gt; [26 January 2021] (Status: Recommendation)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.w3.org/groups/wg/webrtc/publications&#34;&gt;Web Real-Time Communications Working Group - Publications&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;webrtcrfc&#34;&gt;&#xA;  WebRTC(RFC)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webrtcrfc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8825&#34;&gt;RFC8825&lt;/a&gt;: Overview: Real-Time Protocols for Browser-Based Applications H. Alvestrand [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8826&#34;&gt;RFC8826&lt;/a&gt;: Security Considerations for WebRTC E. Rescorla [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8836&#34;&gt;RFC8836&lt;/a&gt;: Congestion Control Requirements for Interactive Real-Time Media R. Jesup, Z. Sarker [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8854&#34;&gt;RFC8854&lt;/a&gt;: WebRTC Forward Error Correction Requirements J. Uberti [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dtls&#34;&gt;&#xA;  DTLS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dtls&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc6347&#34;&gt;RFC6347&lt;/a&gt;: Datagram Transport Layer Security Version 1.2 E. Rescorla, N. Modadugu [January 2012] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc4347&#34;&gt;RFC4347&lt;/a&gt;) (Obsoleted-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc9147&#34;&gt;RFC9147&lt;/a&gt;) (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7507&#34;&gt;RFC7507&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7905&#34;&gt;RFC7905&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8996&#34;&gt;RFC8996&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc9146&#34;&gt;RFC9146&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc9147&#34;&gt;RFC9147&lt;/a&gt;: The Datagram Transport Layer Security (DTLS) Protocol Version 1.3 E. Rescorla, H. Tschofenig, N. Modadugu [April 2022] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc6347&#34;&gt;RFC6347&lt;/a&gt;) (Status: PROPOSED STANDARD) (See also: &lt;a href=&#34;https://github.com/openssl/openssl/issues/13900&#34;&gt;OpenSSL DTLS 1.3 status&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;datachannel&#34;&gt;&#xA;  DataChannel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#datachannel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8831&#34;&gt;RFC8831&lt;/a&gt;: WebRTC Data Channels R. Jesup, S. Loreto, M. Tüxen [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8832&#34;&gt;RFC8832&lt;/a&gt;: WebRTC Data Channel Establishment Protocol R. Jesup, S. Loreto, M. Tüxen [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8864&#34;&gt;RFC8864&lt;/a&gt;: Negotiation Data Channels Using the Session Description Protocol (SDP) K. Drage, M. Makaraju, R. Ejzak, J. Marcon, R. Even [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mediatransport&#34;&gt;&#xA;  MediaTransport&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mediatransport&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8834&#34;&gt;RFC8834&lt;/a&gt;: Media Transport and Use of RTP in WebRTC C. Perkins, M. Westerlund, J. Ott [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8837&#34;&gt;RFC8837&lt;/a&gt;: Differentiated Services Code Point (DSCP) Packet Markings for WebRTC QoS P. Jones, S. Dhesikan, C. Jennings, D. Druta [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;sctp&#34;&gt;&#xA;  SCTP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sctp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc3758&#34;&gt;RFC3758&lt;/a&gt;: Stream Control Transmission Protocol (SCTP) Partial Reliability Extension R. Stewart, M. Ramalho, Q. Xie, M. Tuexen, P. Conrad [May 2004] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc5061&#34;&gt;RFC5061&lt;/a&gt;: Stream Control Transmission Protocol (SCTP) Dynamic Address Reconfiguration R. Stewart, Q. Xie, M. Tuexen, S. Maruyama, M. Kozuka [September 2007] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc5827&#34;&gt;RFC5827&lt;/a&gt;: Early Retransmit for TCP and Stream Control Transmission Protocol (SCTP) M. Allman, K. Avrachenkov, U. Ayesta, J. Blanton, P. Hurtig [May 2010] (Status: EXPERIMENTAL)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc6083&#34;&gt;RFC6083&lt;/a&gt;: Datagram Transport Layer Security (DTLS) for Stream Control Transmission Protocol (SCTP) M. Tuexen, R. Seggelmann, E. Rescorla [January 2011] (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8996&#34;&gt;RFC8996&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc6525&#34;&gt;RFC6525&lt;/a&gt;: Stream Control Transmission Protocol (SCTP) Stream Reconfiguration R. Stewart, M. Tuexen, P. Lei [February 2012] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc6951&#34;&gt;RFC6951&lt;/a&gt;: UDP Encapsulation of Stream Control Transmission Protocol (SCTP) Packets for End-Host to End-Host Communication M. Tuexen, R. Stewart [May 2013] (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8899&#34;&gt;RFC8899&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc7765&#34;&gt;RFC7765&lt;/a&gt;: TCP and Stream Control Transmission Protocol (SCTP) RTO Restart P. Hurtig, A. Brunstrom, A. Petlund, M. Welzl [February 2016] (Status: EXPERIMENTAL)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8260&#34;&gt;RFC8260&lt;/a&gt;: Stream Schedulers and User Message Interleaving for the Stream Control Transmission Protocol R. Stewart, M. Tuexen, S. Loreto, R. Seggelmann [November 2017] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8261&#34;&gt;RFC8261&lt;/a&gt;: Datagram Transport Layer Security (DTLS) Encapsulation of SCTP Packets M. Tuexen, R. Stewart, R. Jesup, S. Loreto [November 2017] (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8899&#34;&gt;RFC8899&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8996&#34;&gt;RFC8996&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8841&#34;&gt;RFC8841&lt;/a&gt;: Session Description Protocol (SDP) Offer/Answer Procedures for Stream Control Transmission Protocol (SCTP) over Datagram Transport Layer Security (DTLS) Transport C. Holmberg, R. Shpount, S. Loreto, G. Camarillo [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8899&#34;&gt;RFC8899&lt;/a&gt;: Packetization Layer Path MTU Discovery for Datagram Transports G. Fairhurst, T. Jones, M. Tüxen, I. Rüngeler, T. Völker [September 2020] (Updates &lt;a href=&#34;http://www.rfc-editor.org/info/rfc4821&#34;&gt;RFC4821&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc4960&#34;&gt;RFC4960&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc6951&#34;&gt;RFC6951&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8085&#34;&gt;RFC8085&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8261&#34;&gt;RFC8261&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc9260&#34;&gt;RFC9260&lt;/a&gt;: Stream Control Transmission Protocol R. Stewart, M. Tüxen, K. Nielsen [June 2022] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc4460&#34;&gt;RFC4460&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc4960&#34;&gt;RFC4960&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc6096&#34;&gt;RFC6096&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7053&#34;&gt;RFC7053&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8540&#34;&gt;RFC8540&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;sdp&#34;&gt;&#xA;  SDP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sdp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8829&#34;&gt;RFC8829&lt;/a&gt;: JavaScript Session Establishment Protocol (JSEP) J. Uberti, C. Jennings, E. Rescorla [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8830&#34;&gt;RFC8830&lt;/a&gt;: WebRTC MediaStream Identification in the Session Description Protocol H. Alvestrand [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8839&#34;&gt;RFC8839&lt;/a&gt;: Session Description Protocol (SDP) Offer/Answer Procedures for Interactive Connectivity Establishment (ICE) M. Petit-Huguenin, S. Nandakumar, C. Holmberg, A. Keränen, R. Shpount [January 2021] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5245&#34;&gt;RFC5245&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc6336&#34;&gt;RFC6336&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8841&#34;&gt;RFC8841&lt;/a&gt;: Session Description Protocol (SDP) Offer/Answer Procedures for Stream Control Transmission Protocol (SCTP) over Datagram Transport Layer Security (DTLS) Transport C. Holmberg, R. Shpount, S. Loreto, G. Camarillo [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8843&#34;&gt;RFC8843&lt;/a&gt;: Negotiating Media Multiplexing Using the Session Description Protocol (SDP) C. Holmberg, H. Alvestrand, C. Jennings [January 2021] (Obsoleted-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc9143&#34;&gt;RFC9143&lt;/a&gt;) (Updates &lt;a href=&#34;http://www.rfc-editor.org/info/rfc3264&#34;&gt;RFC3264&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5888&#34;&gt;RFC5888&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7941&#34;&gt;RFC7941&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8844&#34;&gt;RFC8844&lt;/a&gt;: Unknown Key-Share Attacks on Uses of TLS with the Session Description Protocol (SDP) M. Thomson, E. Rescorla [January 2021] (Updates &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8122&#34;&gt;RFC8122&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8851&#34;&gt;RFC8851&lt;/a&gt;: RTP Payload Format Restrictions A.B. Roach [January 2021] (Updates &lt;a href=&#34;http://www.rfc-editor.org/info/rfc4855&#34;&gt;RFC4855&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8852&#34;&gt;RFC8852&lt;/a&gt;: RTP Stream Identifier Source Description (SDES) A.B. Roach, S. Nandakumar, P. Thatcher [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8853&#34;&gt;RFC8853&lt;/a&gt;: Using Simulcast in Session Description Protocol (SDP) and RTP Sessions B. Burman, M. Westerlund, S. Nandakumar, M. Zanaty [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8866&#34;&gt;RFC8866&lt;/a&gt;: SDP: Session Description Protocol A. Begen, P. Kyzivat, C. Perkins, M. Handley [January 2021] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc4566&#34;&gt;RFC4566&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;rtp&#34;&gt;&#xA;  RTP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rtp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc3550&#34;&gt;RFC3550&lt;/a&gt;: RTP: A Transport Protocol for Real-Time Applications H. Schulzrinne, S. Casner, R. Frederick, V. Jacobson [July 2003] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc1889&#34;&gt;RFC1889&lt;/a&gt;) (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5506&#34;&gt;RFC5506&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5761&#34;&gt;RFC5761&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc6051&#34;&gt;RFC6051&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc6222&#34;&gt;RFC6222&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7022&#34;&gt;RFC7022&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7160&#34;&gt;RFC7160&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7164&#34;&gt;RFC7164&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8083&#34;&gt;RFC8083&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8108&#34;&gt;RFC8108&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8860&#34;&gt;RFC8860&lt;/a&gt;) (Also &lt;a href=&#34;http://www.rfc-editor.org/info/std0064&#34;&gt;STD0064&lt;/a&gt;) (Status: INTERNET STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc3611&#34;&gt;RFC3611&lt;/a&gt;: RTP Control Protocol Extended Reports (RTCP XR) T. Friedman, R. Caceres, A. Clark [November 2003] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc3711&#34;&gt;RFC3711&lt;/a&gt;: The Secure Real-time Transport Protocol (SRTP) M. Baugher, D. McGrew, M. Naslund, E. Carrara, K. Norrman [March 2004] (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5506&#34;&gt;RFC5506&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc6904&#34;&gt;RFC6904&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc4585&#34;&gt;RFC4585&lt;/a&gt;: Extended RTP Profile for Real-time Transport Control Protocol (RTCP)-Based Feedback (RTP/AVPF) J. Ott, S. Wenger, N. Sato, C. Burmeister, J. Rey [July 2006] (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5506&#34;&gt;RFC5506&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8108&#34;&gt;RFC8108&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc5104&#34;&gt;RFC5104&lt;/a&gt;: Codec Control Messages in the RTP Audio-Visual Profile with Feedback (AVPF) S. Wenger, U. Chandra, M. Westerlund, B. Burman [February 2008] (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7728&#34;&gt;RFC7728&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8082&#34;&gt;RFC8082&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc5764&#34;&gt;RFC5764&lt;/a&gt;: Datagram Transport Layer Security (DTLS) Extension to Establish Keys for the Secure Real-time Transport Protocol (SRTP) D. McGrew, E. Rescorla [May 2010] (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7983&#34;&gt;RFC7983&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc6904&#34;&gt;RFC6904&lt;/a&gt;: Encryption of Header Extensions in the Secure Real-time Transport Protocol (SRTP) J. Lennox [April 2013] (Updates &lt;a href=&#34;http://www.rfc-editor.org/info/rfc3711&#34;&gt;RFC3711&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc7741&#34;&gt;RFC7741&lt;/a&gt;: RTP Payload Format for VP8 Video P. Westin, H. Lundin, M. Glover, J. Uberti, F. Galligan [March 2016] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8285&#34;&gt;RFC8285&lt;/a&gt;: A General Mechanism for RTP Header Extensions D. Singer, H. Desineni, R. Even [October 2017] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5285&#34;&gt;RFC5285&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8852&#34;&gt;RFC8852&lt;/a&gt;: RTP Stream Identifier Source Description (SDES) A.B. Roach, S. Nandakumar, P. Thatcher [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8858&#34;&gt;RFC8858&lt;/a&gt;: Indicating Exclusive Support of RTP and RTP Control Protocol (RTCP) Multiplexing Using the Session Description Protocol (SDP) C. Holmberg [January 2021] (Updates &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5761&#34;&gt;RFC5761&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8860&#34;&gt;RFC8860&lt;/a&gt;: Sending Multiple Types of Media in a Single RTP Session M. Westerlund, C. Perkins, J. Lennox [January 2021] (Updates &lt;a href=&#34;http://www.rfc-editor.org/info/rfc3550&#34;&gt;RFC3550&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc3551&#34;&gt;RFC3551&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8867&#34;&gt;RFC8867&lt;/a&gt;: Test Cases for Evaluating Congestion Control for Interactive Real-Time Media Z. Sarker, V. Singh, X. Zhu, M. Ramalho [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8868&#34;&gt;RFC8868&lt;/a&gt;: Evaluating Congestion Control for Interactive Real-Time Media V. Singh, J. Ott, S. Holmer [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8869&#34;&gt;RFC8869&lt;/a&gt;: Evaluation Test Cases for Interactive Real-Time Media over Wireless Networks Z. Sarker, X. Zhu, J. Fu [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8872&#34;&gt;RFC8872&lt;/a&gt;: Guidelines for Using the Multiplexing Features of RTP to Support Multiple Media Streams M. Westerlund, B. Burman, C. Perkins, H. Alvestrand, R. Even [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8888&#34;&gt;RFC8888&lt;/a&gt;: RTP Control Protocol (RTCP) Feedback for Congestion Control Z. Sarker, C. Perkins, V. Singh, M. Ramalho [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ice-turn-and-stun&#34;&gt;&#xA;  ICE, TURN and STUN&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ice-turn-and-stun&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc5780&#34;&gt;RFC5780&lt;/a&gt;: NAT Behavior Discovery Using Session Traversal Utilities for NAT (STUN) D. MacDonald, B. Lowekamp [May 2010] (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8553&#34;&gt;RFC8553&lt;/a&gt;) (Status: EXPERIMENTAL)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8445&#34;&gt;RFC8445&lt;/a&gt;: Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal A. Keranen, C. Holmberg, J. Rosenberg [July 2018] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5245&#34;&gt;RFC5245&lt;/a&gt;) (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8863&#34;&gt;RFC8863&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8489&#34;&gt;RFC8489&lt;/a&gt;: Session Traversal Utilities for NAT (STUN) M. Petit-Huguenin, G. Salgueiro, J. Rosenberg, D. Wing, R. Mahy, P. Matthews [February 2020] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5389&#34;&gt;RFC5389&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8656&#34;&gt;RFC8656&lt;/a&gt;: Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN) T. Reddy, A. Johnston, P. Matthews, J. Rosenberg [February 2020] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5766&#34;&gt;RFC5766&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc6156&#34;&gt;RFC6156&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8835&#34;&gt;RFC8835&lt;/a&gt;: Transports for WebRTC H. Alvestrand [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8838&#34;&gt;RFC8838&lt;/a&gt;: Trickle ICE: Incremental Provisioning of Candidates for the Interactive Connectivity Establishment (ICE) Protocol E. Ivov, J. Uberti, P. Saint-Andre [January 2021] (Updated-By &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8863&#34;&gt;RFC8863&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8839&#34;&gt;RFC8839&lt;/a&gt;: Session Description Protocol (SDP) Offer/Answer Procedures for Interactive Connectivity Establishment (ICE) M. Petit-Huguenin, S. Nandakumar, C. Holmberg, A. Keränen, R. Shpount [January 2021] (Obsoletes &lt;a href=&#34;http://www.rfc-editor.org/info/rfc5245&#34;&gt;RFC5245&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc6336&#34;&gt;RFC6336&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.rfc-editor.org/info/rfc8863&#34;&gt;RFC8863&lt;/a&gt;: Interactive Connectivity Establishment Patiently Awaiting Connectivity (ICE PAC) C. Holmberg, J. Uberti [January 2021] (Updates &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8445&#34;&gt;RFC8445&lt;/a&gt;, &lt;a href=&#34;http://www.rfc-editor.org/info/rfc8838&#34;&gt;RFC8838&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
