<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on 给好奇者的WebRTC</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/</link><description>Recent content in Docs on 给好奇者的WebRTC</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>是什么，为什么，如何使用</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/01-what-why-and-how/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/01-what-why-and-how/</guid><description>&lt;h1 id="是什么为什么如何使用"&gt;
 是什么，为什么，如何使用
 &lt;a class="anchor" href="#%e6%98%af%e4%bb%80%e4%b9%88%e4%b8%ba%e4%bb%80%e4%b9%88%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="webrtc-是什么"&gt;
 WebRTC 是什么？
 &lt;a class="anchor" href="#webrtc-%e6%98%af%e4%bb%80%e4%b9%88"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;WebRTC 是 Web 实时通信（Real-Time Communication）的缩写，它既是 API 也是协议。WebRTC 协议是两个 WebRTC Agent 协商双向安全实时通信的一组规则。开发人员可以通过 WebRTC API 使用 WebRTC 协议。目前 WebRTC API 仅有 JavaScript 版本。&lt;/p&gt;
&lt;p&gt;可以用 HTTP 和 Fetch API 之间的关系作为类比。WebRTC 协议就是 HTTP，而 WebRTC API 就是 Fetch API。&lt;/p&gt;
&lt;p&gt;除了 JavaScript 语言，WebRTC 协议也可以在其他 API 和语言中使用。你还可以找到 WebRTC 的服务器和特定领域的工具。所有这些实现都使用 WebRTC 协议，以便它们可以彼此交互。&lt;/p&gt;
&lt;p&gt;WebRTC 协议由 IETF 工作组在&lt;a href="https://datatracker.ietf.org/wg/rtcweb/documents/"&gt;rtcweb&lt;/a&gt;中维护。WebRTC API 的 W3C 文档在&lt;a href="https://www.w3.org/TR/webrtc/"&gt;webrtc&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="为什么我应该学习-webrtc"&gt;
 为什么我应该学习 WebRTC？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e6%88%91%e5%ba%94%e8%af%a5%e5%ad%a6%e4%b9%a0-webrtc"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;下面这些是 WebRTC 可以带给你的东西。这并不是一份详尽的清单，只是列举一些你在学习中可能感兴趣的点。如果你还不了解所有这些术语，请不要担心，本书将陆续将这些概念教给你。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放标准&lt;/li&gt;
&lt;li&gt;多种实现&lt;/li&gt;
&lt;li&gt;在浏览器中可用&lt;/li&gt;
&lt;li&gt;强制加密&lt;/li&gt;
&lt;li&gt;NAT 穿透&lt;/li&gt;
&lt;li&gt;复用现有技术&lt;/li&gt;
&lt;li&gt;拥塞控制&lt;/li&gt;
&lt;li&gt;亚秒级延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="webrtc-协议是一组其他技术的集合体"&gt;
 WebRTC 协议是一组其他技术的集合体
 &lt;a class="anchor" href="#webrtc-%e5%8d%8f%e8%ae%ae%e6%98%af%e4%b8%80%e7%bb%84%e5%85%b6%e4%bb%96%e6%8a%80%e6%9c%af%e7%9a%84%e9%9b%86%e5%90%88%e4%bd%93"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;这个主题需要整本书来解释。但是，首先，我们将其分为四个步骤。&lt;/p&gt;</description></item><item><title>信令</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/02-signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/02-signaling/</guid><description>&lt;h1 id="信令"&gt;
 信令
 &lt;a class="anchor" href="#%e4%bf%a1%e4%bb%a4"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="什么是-webrtc-信令"&gt;
 什么是 WebRTC 信令？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-webrtc-%e4%bf%a1%e4%bb%a4"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;当一个 WebRTC Agent 被创建时，它对其他 peer 一无所知。它不知道它将与谁联系，也不知道它们将发送些什么！
信令是使呼叫成为可能的初始引导程序。交换信令消息后，WebRTC Agent 才可以直接相互通信。&lt;/p&gt;
&lt;p&gt;信令消息只是文本。WebRTC Agent 并不关心它们的传递方式。信令通常使用 Websockets 分享，但这不是必需的。&lt;/p&gt;
&lt;h2 id="webrtc-信令如何工作"&gt;
 WebRTC 信令如何工作？
 &lt;a class="anchor" href="#webrtc-%e4%bf%a1%e4%bb%a4%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;WebRTC 使用到一种现有的协议，称为会话描述协议（Session Description Protocol，简称 SDP）。两个 WebRTC Agent 会将建立连接所需的所有状态通过此协议来分享。该协议本身亦易于阅读和理解。
但要理解 WebRTC 填充于协议中的所有值，是有些复杂的。&lt;/p&gt;
&lt;p&gt;SDP 并不是 WebRTC 特有的。我们将首先学习会话描述协议，这里甚至不用提到 WebRTC。WebRTC 实际上仅是利用了 SDP 协议的子集，因此我们将仅介绍我们所需的内容。
理解协议后，我们将继续结合 WebRTC 来说明其在实际中的应用方法。&lt;/p&gt;
&lt;h2 id="什么是-会话描述协议sdp"&gt;
 什么是 &lt;em&gt;会话描述协议&lt;/em&gt;（SDP）？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-%e4%bc%9a%e8%af%9d%e6%8f%8f%e8%bf%b0%e5%8d%8f%e8%ae%aesdp"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;会话描述协议定义于 &lt;a href="https://tools.ietf.org/html/rfc8866"&gt;RFC 8866&lt;/a&gt; 中。它是一个 key/value 协议，每一行是一个值。看起来类似于 INI 文件。
一个会话描述包含零个或多个媒体描述。对此模型，可以理解为会话描述包含了一个媒体描述的数组。&lt;/p&gt;
&lt;p&gt;一个媒体描述通常映射到单个媒体流。因此，如果你想描述一个包含三个视频流和两个音轨的呼叫，需要五个媒体描述。&lt;/p&gt;
&lt;h3 id="如何阅读-sdp-信息"&gt;
 如何阅读 SDP 信息
 &lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e9%98%85%e8%af%bb-sdp-%e4%bf%a1%e6%81%af"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;会话描述中的每一行都将以一个单字符开始，这是你的 key。单字符后面将跟随一个等号。等号后的所有内容都是 value。value 结束的地方将有一个换行符。&lt;/p&gt;</description></item><item><title>连接</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/03-connecting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/03-connecting/</guid><description>&lt;h1 id="连接"&gt;
 连接
 &lt;a class="anchor" href="#%e8%bf%9e%e6%8e%a5"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="为什么-webrtc-需要专用的子系统进行连接"&gt;
 为什么 WebRTC 需要专用的子系统进行连接？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88-webrtc-%e9%9c%80%e8%a6%81%e4%b8%93%e7%94%a8%e7%9a%84%e5%ad%90%e7%b3%bb%e7%bb%9f%e8%bf%9b%e8%a1%8c%e8%bf%9e%e6%8e%a5"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;目前，大多数部署的应用程序都通过客户端 / 服务器方式进行连接。客户端 / 服务器方式连接要求服务器具有稳定且公开可用的传输地址。客户端与服务器联系，然后服务器做出响应。&lt;/p&gt;
&lt;p&gt;WebRTC 不使用客户端 / 服务器模型，它建立点对点（P2P）连接。 在 P2P 连接中，创建连接的任务被平均分配给两个对等方。这是因为无法猜测 WebRTC 中的传输地址（IP 和端口），而且，在会话过程中，传输地址甚至可能会变更。WebRTC 将收集所有可能收集的信息，并将尽力实现两个 WebRTC Agent 之间的双向通信。&lt;/p&gt;
&lt;p&gt;听起来简单，建立点对点连接实际上可能会非常困难。这些 Agent 可能位于没有直接连接的不同网络中。即使在两个 Agent 可以直接连接的情况下，你可能还会遇到其他问题。比如在某些情况下，两个客户端使用不同的网络协议（UDP &amp;lt;-&amp;gt; TCP）或使用不同的 IP 版本（IPv4 &amp;lt;-&amp;gt; IPv6）。&lt;/p&gt;
&lt;p&gt;尽管在建立点对点连接方面存在一些困难，在 WebRTC 提供的下面这些属性的帮助下，你仍然可以获得相对于传统客户端 / 服务器技术的一些优势。&lt;/p&gt;
&lt;h3 id="降低带宽成本"&gt;
 降低带宽成本
 &lt;a class="anchor" href="#%e9%99%8d%e4%bd%8e%e5%b8%a6%e5%ae%bd%e6%88%90%e6%9c%ac"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;由于媒体通信直接发生在 peer 之间，因此你无需为之付费，也无需托管一个单独的服务器来转发媒体。&lt;/p&gt;
&lt;h3 id="更低延迟"&gt;
 更低延迟
 &lt;a class="anchor" href="#%e6%9b%b4%e4%bd%8e%e5%bb%b6%e8%bf%9f"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;直接通信时速度更快！当用户必须通过你的服务器运行所有内容时，这会使传输速度变慢。&lt;/p&gt;
&lt;h3 id="安全的端到端通信"&gt;
 安全的端到端通信
 &lt;a class="anchor" href="#%e5%ae%89%e5%85%a8%e7%9a%84%e7%ab%af%e5%88%b0%e7%ab%af%e9%80%9a%e4%bf%a1"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;直接通信更安全。由于用户数据根本没有通过你的服务器，因此用户压根不需要考虑你的服务器会不会解密其数据。&lt;/p&gt;
&lt;h2 id="它是如何工作的"&gt;
 它是如何工作的？
 &lt;a class="anchor" href="#%e5%ae%83%e6%98%af%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c%e7%9a%84"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;上面描述的连接过程是通过 Interactive Connectivity Establishment（&lt;a href="https://tools.ietf.org/html/rfc8445"&gt;交互式连接建立 /ICE&lt;/a&gt;） 实现的。这是另一个在 WebRTC 之前就已经出现的协议。&lt;/p&gt;
&lt;p&gt;ICE 是一种用来寻找两个 ICE Agent 之间通信的最佳方式的协议。每个 ICE Agent 都会发布如何访问自己的方式，这些路径被称为候选地址（candidates）。候选地址本质上是一个传输地址，ICE Agent 认为这个传输地址可能可以被对端访问到。接下来 ICE 将确定候选地址的最佳搭配。&lt;/p&gt;</description></item><item><title>安全性</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/04-securing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/04-securing/</guid><description>&lt;h1 id="安全性"&gt;
 安全性
 &lt;a class="anchor" href="#%e5%ae%89%e5%85%a8%e6%80%a7"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="webrtc-具有哪些安全性保障"&gt;
 WebRTC 具有哪些安全性保障？
 &lt;a class="anchor" href="#webrtc-%e5%85%b7%e6%9c%89%e5%93%aa%e4%ba%9b%e5%ae%89%e5%85%a8%e6%80%a7%e4%bf%9d%e9%9a%9c"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;每个 WebRTC 连接都经过身份验证和加密。你可以确信第三方看不到你发送的内容，也无法插入虚假消息。你还可以确保与你进行通信的 WebRTC Agent 正是生成会话描述的 Agent。&lt;/p&gt;
&lt;p&gt;没有人能够篡改消息这一点非常重要。如果第三方在传输中读取了会话描述，这不会产生什么影响。然而，WebRTC 无法防止会话描述被修改。攻击者可以通过更改 ICE 候选地址和证书指纹来对你进行中间人攻击（man-in-the-middle）。&lt;/p&gt;
&lt;blockquote class="book-hint info"&gt;
 译注：这里指的是，P2P 连接建立之后，双方之间的通信安全是有保障的。但在连接建立的过程中，攻击者可以通过 man-in-the-middle 方式伪装中间人同时与通信双方建立连接并通信。
&lt;/blockquote&gt;

&lt;h2 id="它是如何做到的"&gt;
 它是如何做到的？
 &lt;a class="anchor" href="#%e5%ae%83%e6%98%af%e5%a6%82%e4%bd%95%e5%81%9a%e5%88%b0%e7%9a%84"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;WebRTC 使用两个预先存在的协议，数据报传输层安全（Datagram Transport Layer Security / &lt;a href="https://tools.ietf.org/html/rfc6347"&gt;DTLS&lt;/a&gt;）和 安全实时传输协议（Secure Real-time Transport Protocol / &lt;a href="https://tools.ietf.org/html/rfc3711"&gt;SRTP&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;DTLS 使你可以协商会话，然后在两个 peer 之间安全地交换数据。它是 TLS 的同类产品，TLS 是 HTTPS 所使用的技术，而 DTLS 与 TLS 的区别仅在与其使用 UDP 而不是 TCP 作为其传输层。这也意味着 DTLS 协议必须处理不可靠的数据传输。SRTP 是专为安全的交换媒体数据而设计的。相对于 DTLS 而言，使用 SRTP 对传输媒体数据有一些优化。&lt;/p&gt;
&lt;p&gt;DTLS 先被使用。它通过 ICE 提供的连接进行一次握手。DTLS 是一种客户端 / 服务器协议，因此其中一侧需要开始握手。客户端 / 服务器的角色是在信令中被确定的。在 DTLS 握手期间，双方都会提供证书。
握手完成后，需要将收到的证书与&lt;code&gt;会话描述&lt;/code&gt;中的证书哈希进行比较。这是为了确定握手的目标就是你所期望的 WebRTC Agent。接下来，可以将 DTLS 连接用于 DataChannel 通信。&lt;/p&gt;</description></item><item><title>搭建实时网络</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/05-real-time-networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/05-real-time-networking/</guid><description>&lt;h1 id="实时网络"&gt;
 实时网络
 &lt;a class="anchor" href="#%e5%ae%9e%e6%97%b6%e7%bd%91%e7%bb%9c"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="为什么网络在实时通信中如此重要"&gt;
 为什么网络在实时通信中如此重要？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e7%bd%91%e7%bb%9c%e5%9c%a8%e5%ae%9e%e6%97%b6%e9%80%9a%e4%bf%a1%e4%b8%ad%e5%a6%82%e6%ad%a4%e9%87%8d%e8%a6%81"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;网络是实时通信中的限制因素。在理想的世界中，我们将拥有无限的带宽，并且数据包会即时到达。但事实并非如此。网络是受限的，且其限定条件随时可能更改。测量和观察网络状况也是一个难题。根据你所使用的硬件，软件及其配置，你可能看到不同的表现。&lt;/p&gt;
&lt;p&gt;实时通信也带来了其他大多数领域中不存在的问题。对于网站开发人员来说，如果你的网站在某些网络上运行速度较慢，那不是致命问题。只要所有数据到达，用户都会感到满意。但对于 WebRTC，如果你的数据延迟了，那就没用了。没有人在乎 5 秒钟前的电话会议中所说过的话。因此，在开发一个实时通信系统时，必须作出权衡。我的时间限制是多少，可以发送多少数据？&lt;/p&gt;
&lt;p&gt;本章介绍了适用于数据和媒体通信的概念。在后面的章节中，我们将超出理论范围，讨论一下 WebRTC 的媒体和数据子系统如何解决这些问题。&lt;/p&gt;
&lt;h2 id="网络的哪些属性让它很难-"&gt;
 网络的哪些属性让它很难 ?
 &lt;a class="anchor" href="#%e7%bd%91%e7%bb%9c%e7%9a%84%e5%93%aa%e4%ba%9b%e5%b1%9e%e6%80%a7%e8%ae%a9%e5%ae%83%e5%be%88%e9%9a%be-"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;在所有网络上都能有效工作的代码很复杂。你会面对许多不同的因素，它们都可以相互影响。这些是开发人员将遇到的最常见问题。&lt;/p&gt;
&lt;h3 id="带宽"&gt;
 带宽
 &lt;a class="anchor" href="#%e5%b8%a6%e5%ae%bd"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;带宽是可以在给定路径上传输的最大数据速率。请记住，它不是一个静态数字，这一点很重要。带宽会随着使用者的增多（或减少）而改变。&lt;/p&gt;
&lt;h3 id="传输时间和往返时间"&gt;
 传输时间和往返时间
 &lt;a class="anchor" href="#%e4%bc%a0%e8%be%93%e6%97%b6%e9%97%b4%e5%92%8c%e5%be%80%e8%bf%94%e6%97%b6%e9%97%b4"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;传输时间指的是一个数据包需要多长时间到达。像带宽一样，这不是恒定的。传输时间随时可能波动。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;传输时间 = 接收时间 - 发送时间&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要计算传输时间，你需要将发送方和接收方的时钟以毫秒级精度同步。
即使一个很小的偏差也会导致传输时间的测量结果不可靠。
由于 WebRTC 在高度异构的环境中运行，因此依靠主机之间完美的时间同步（来测量传输时间）几乎是不可能的。&lt;/p&gt;
&lt;p&gt;往返时间测量是对不完美的时钟同步的一种解决方法。&lt;/p&gt;
&lt;p&gt;（要测量往返时间，）WebRTC peer 不使用分布式时钟，而是发送一个特殊数据包，携带名为 &lt;code&gt;sendertime1&lt;/code&gt; 的自己的时间戳。
合作的 peer 接收到这个特殊数据包后，会将时间戳返还给发送方。
当原始发送方获得返还的时间戳时，它会用当前时间 &lt;code&gt;sendertime2&lt;/code&gt; 减去 &lt;code&gt;sendertime1&lt;/code&gt; 时间戳。
得到的时间差称为 &amp;quot; 往返传播延迟（round-trip propagation delay）&amp;quot;，或者就使用更常见的 &amp;quot; 往返时间 &amp;ldquo;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rtt（往返时间） = sendertime2 - sendertime1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一般认为，往返时间的一半可以用来较好地近似传输时间。
但此解决方法并非没有缺点。
它假设发送和接收数据包花费的时间是相等的。
但是，在蜂窝网络上，发送和接收操作可能不是时间对称的。
你可能已经注意到了，手机上的上传速度几乎总是低于下载速度。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;传输时间 = rtt（往返时间）/2&lt;/code&gt;&lt;/p&gt;</description></item><item><title>媒体通信</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/06-media-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/06-media-communication/</guid><description>&lt;h1 id="媒体通信"&gt;
 媒体通信
 &lt;a class="anchor" href="#%e5%aa%92%e4%bd%93%e9%80%9a%e4%bf%a1"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="我可以从-webrtc-的媒体通信中得到什么"&gt;
 我可以从 WebRTC 的媒体通信中得到什么？
 &lt;a class="anchor" href="#%e6%88%91%e5%8f%af%e4%bb%a5%e4%bb%8e-webrtc-%e7%9a%84%e5%aa%92%e4%bd%93%e9%80%9a%e4%bf%a1%e4%b8%ad%e5%be%97%e5%88%b0%e4%bb%80%e4%b9%88"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;WebRTC 允许你发送和接收无限多条音频和视频流。你可以在通话期间随时添加和删除这些流。这些流可以全部独立，也可以捆绑在一起！你甚至可以将网络摄像头的音频和视频放到你桌面的视频中，然后将此视频以 feed 的形式发送出去。&lt;/p&gt;
&lt;p&gt;WebRTC 协议与编解码器无关。底层传输支持所有格式的内容，即使是还不存在的格式！ 但是，你正与之通信的 WebRTC Agent 可能没有必要的工具来接受它。&lt;/p&gt;
&lt;p&gt;WebRTC 针对动态网络状况也有对应的处理方案。在通话过程中，带宽可能会增加或减少。甚至可能突然间大量丢包。该协议对所有这类问题的处理都做了相应的设计。WebRTC 根据网络状况作出响应，并尝试利用可用资源为你提供最佳体验。&lt;/p&gt;
&lt;h2 id="它是如何工作的"&gt;
 它是如何工作的？
 &lt;a class="anchor" href="#%e5%ae%83%e6%98%af%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c%e7%9a%84"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;WebRTC 使用&lt;a href="https://tools.ietf.org/html/rfc1889"&gt;RFC 1889&lt;/a&gt;中定义的两个既有协议 RTP 和 RTCP。&lt;/p&gt;
&lt;p&gt;RTP（实时传输协议 /Real-time Transport Protocol）是承载媒体的协议。它为视频的实时传输而设计。它没有规定有关延迟或可靠性的任何规则，但是为你提供了实现这些规则的工具。RTP 提供了流的设计，因此你可以通过一个连接发布多个媒体源。它还为你提供了完善媒体传递途径所需的计时和排序信息。&lt;/p&gt;
&lt;p&gt;RTCP（RTP 控制协议 /RTP Control Protocol）是用于传达有关呼叫的元数据的协议。其格式非常灵活，并允许你可以添加所需的任何元数据。这点被用来传达有关呼叫的统计信息。也是处理分组丢失和实现拥塞控制的必备特性。它为你提供了响应变化的网络状况所必需的双向通信能力。&lt;/p&gt;
&lt;h2 id="延迟与质量"&gt;
 延迟与质量
 &lt;a class="anchor" href="#%e5%bb%b6%e8%bf%9f%e4%b8%8e%e8%b4%a8%e9%87%8f"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;实时媒体就是要在延迟和质量之间进行权衡。你愿意忍受的延迟时间越长，可以预期的视频质量就越高。&lt;/p&gt;
&lt;h3 id="现实世界的局限性"&gt;
 现实世界的局限性
 &lt;a class="anchor" href="#%e7%8e%b0%e5%ae%9e%e4%b8%96%e7%95%8c%e7%9a%84%e5%b1%80%e9%99%90%e6%80%a7"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;下面这些限制都是由现实世界的局限性引起的。它们都是你需要考虑的网络特性。&lt;/p&gt;
&lt;h3 id="视频是复杂的"&gt;
 视频是复杂的
 &lt;a class="anchor" href="#%e8%a7%86%e9%a2%91%e6%98%af%e5%a4%8d%e6%9d%82%e7%9a%84"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;传输视频并不容易。要存储 30 分钟未经压缩的 720p 的 8-bit 视频，你需要大约 110GB。按照这个数据，4 人电话会议就开不成了。我们需要一种缩小容量的方法，而答案就是视频压缩。但是，这并非没有缺点。&lt;/p&gt;
&lt;h2 id="视频-101"&gt;
 视频 101
 &lt;a class="anchor" href="#%e8%a7%86%e9%a2%91-101"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;我们不会深入介绍视频压缩，只需要让大家足以理解为什么 RTP 是这么设计的。视频压缩会将视频编码为一种新格式，这样可以需要较少的 bit 数来表示同一视频。&lt;/p&gt;
&lt;h3 id="有损和无损压缩"&gt;
 有损和无损压缩
 &lt;a class="anchor" href="#%e6%9c%89%e6%8d%9f%e5%92%8c%e6%97%a0%e6%8d%9f%e5%8e%8b%e7%bc%a9"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;你可以将视频编码为无损（无信息丢失）或有损（信息可能丢失）压缩。由于无损编码需要将更多的数据发送到对端，这样会导致更高的流延迟和更多的丢包，因此 RTP 通常使用有损压缩，即使这样可能会导致视频质量不佳。&lt;/p&gt;</description></item><item><title>数据通信</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/07-data-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/07-data-communication/</guid><description>&lt;h1 id="数据通信"&gt;
 数据通信
 &lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e9%80%9a%e4%bf%a1"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="我可以从-webrtc-的数据通信中获得什么"&gt;
 我可以从 WebRTC 的数据通信中获得什么？
 &lt;a class="anchor" href="#%e6%88%91%e5%8f%af%e4%bb%a5%e4%bb%8e-webrtc-%e7%9a%84%e6%95%b0%e6%8d%ae%e9%80%9a%e4%bf%a1%e4%b8%ad%e8%8e%b7%e5%be%97%e4%bb%80%e4%b9%88"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;WebRTC 提供用于数据通信的数据通道。在两个 peer 之间，你可以打开 65,534 个数据通道。
数据通道基于数据报，并且每个通道都有其自己的持久性设置。默认设置下，每个数据通道都能保证有序交付。&lt;/p&gt;
&lt;p&gt;如果你从传递媒体数据的角度开始接触 WebRTC，可能数据通道看起来是一种浪费。当我只使用 HTTP 或 WebSocket 就能传递数据的时候，为什么需要整个数据通道子系统呢？&lt;/p&gt;
&lt;p&gt;数据通道的真正强大之处在于，你可以将它们配置为像 UDP 一样进行无序 / 有损传递。
对于低延迟和高性能的情况，这是必需的。你可以测量背压，并确保你仅发送网络支持的最大数据量。&lt;/p&gt;
&lt;h2 id="它是如何工作的"&gt;
 它是如何工作的？
 &lt;a class="anchor" href="#%e5%ae%83%e6%98%af%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c%e7%9a%84"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;WebRTC 使用&lt;a href="https://tools.ietf.org/html/rfc4960"&gt;RFC 4960&lt;/a&gt;中定义的流控制传输协议（SCTP）。SCTP 是一种传输层协议，旨在替代 TCP 或 UDP。对于 WebRTC，我们将 SCTP 用作在 DTLS 连接上运行的应用层协议。&lt;/p&gt;
&lt;p&gt;SCTP 为你提供流，并且每个流都可以独立配置。WebRTC 数据通道只是基于流的简单抽象。有关持久性和顺序的设置会被直接传递到 SCTP Agent 中。&lt;/p&gt;
&lt;p&gt;数据通道具有 SCTP 无法表达的某些功能，例如通道标签。为了解决该问题，WebRTC 使用了&lt;a href="https://tools.ietf.org/html/rfc8832"&gt;RFC 8832&lt;/a&gt;中定义的数据通道建立协议（DCEP）。DCEP 定义了一条消息，用于传递通道标签和协议。&lt;/p&gt;
&lt;h2 id="dcep"&gt;
 DCEP
 &lt;a class="anchor" href="#dcep"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;DCEP 只有两个消息 &lt;code&gt;DATA_CHANNEL_OPEN&lt;/code&gt; 和 &lt;code&gt;DATA_CHANNEL_ACK&lt;/code&gt;。对于打开的每个数据通道，远端必须以 ack 响应。&lt;/p&gt;
&lt;h3 id="data_channel_open"&gt;
 DATA_CHANNEL_OPEN
 &lt;a class="anchor" href="#data_channel_open"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;该消息由希望打开数据通道的 WebRTC Agent 发送。&lt;/p&gt;</description></item><item><title>WebRTC 应用场景</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/08-applied-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/08-applied-webrtc/</guid><description>&lt;h1 id="webrtc-应用场景"&gt;
 WebRTC 应用场景
 &lt;a class="anchor" href="#webrtc-%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;现在你已经知道 WebRTC 的工作原理，到了使用它的时候了！本章探讨人们使用 WebRTC 构建什么以及他们是如何实现的。你将学到基于 WebRTC 发生的所有有趣的事情。WebRTC 的功能是有代价的。建立产品级的 WebRTC 服务相当有挑战性。本章将尝试解释这些挑战性的根源，这样你遇到问题时就能有所准备。&lt;/p&gt;
&lt;h2 id="用例"&gt;
 用例
 &lt;a class="anchor" href="#%e7%94%a8%e4%be%8b"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;许多人认为 WebRTC 只是一种在 web 浏览器中实现电话会议的技术。实际上，它能做的不仅如此！
WebRTC 被广泛用于各种用例。新的用例一直在出现。在本章中，我们将列出一些常见的用例，并探讨一下 WebRTC 是如何对它们进行革新的。&lt;/p&gt;
&lt;h3 id="电话会议"&gt;
 电话会议
 &lt;a class="anchor" href="#%e7%94%b5%e8%af%9d%e4%bc%9a%e8%ae%ae"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;电话会议是 WebRTC 的原始用例。该协议包含浏览器中几个必要功能，这些功能没有其他协议提供支持。你可以使用 WebSockets 构建会议系统，在各种条件都满足的情况下，它可能可以工作。但如果你希望在现实世界的网络条件下部署一些服务，那么 WebRTC 是最佳选择。&lt;/p&gt;
&lt;p&gt;WebRTC 为媒体提供拥塞控制和自适应比特率。随着网络条件的变化，用户仍将获得最佳体验。开发人员不必编写任何其他代码来处理这些情况。&lt;/p&gt;
&lt;p&gt;参与者可以发送和接收多个流。在呼叫过程中，他们还可以随时添加和删除这些流。编解码器也经过协商。所有这些功能都是由浏览器提供的，开发人员无需编写任何自定义代码。&lt;/p&gt;
&lt;p&gt;数据通道也对电话会议有所助益。用户可以发送元数据或共享文档。如果更看重性能而不是可靠性，可以创建多个流并对其进行配置。&lt;/p&gt;
&lt;h3 id="广播"&gt;
 广播
 &lt;a class="anchor" href="#%e5%b9%bf%e6%92%ad"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;许多使用 WebRTC 的新项目开始出现在广播领域中。协议为媒体的发布者和消费者都提供了很多支持。&lt;/p&gt;
&lt;p&gt;浏览器中的 WebRTC 使得用户可以轻松发布视频。这样用户不需要下载新的客户端。
任何具有 Web 浏览器的平台都可以发布视频。发布者可以发送多个音轨 / 视频流，并可以随时对其进行修改或删除。传统协议中每个连接只允许一个音频或一个视频流，与之相比，这是一个巨大的改进。&lt;/p&gt;
&lt;p&gt;WebRTC 使开发人员可以更好地控制延迟和质量之间的权衡。如果不允许延迟超过特定阈值更重要，那么为此你可能愿意容忍对解码质量做一些让步。你也可以将播放器配置为在媒体到达时立即播放。如果是使用在 TCP 之上的其他协议，要完成这一点并不是那么容易。但在浏览器中，你只需要请求数据，就这么简单。&lt;/p&gt;
&lt;h3 id="远程访问"&gt;
 远程访问
 &lt;a class="anchor" href="#%e8%bf%9c%e7%a8%8b%e8%ae%bf%e9%97%ae"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;远程访问是当你通过 WebRTC 访问远端的另一台计算机。你可以完全控制远程主机，也可以只控制一个应用程序。当本地硬件无法执行繁重的计算任务时，这非常有用。例如，运行新的视频游戏或 CAD 软件。WebRTC 能够通过下面三种方式彻底改变对物理空间的需求。&lt;/p&gt;
&lt;p&gt;WebRTC 可用于远程访问那些无法直接路由的主机。使用 NAT 遍历，你可以访问仅通过 STUN 可用的计算机。这对于安全性和隐私性非常有用。你的用户不必通过中转或所谓 &amp;quot; 跳转盒 &amp;quot; 来路由视频。NAT 遍历还使得部署更加容易。你不必担心端口转发问题或提前设置静态 IP。&lt;/p&gt;</description></item><item><title>调试</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/09-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/09-debugging/</guid><description>&lt;h1 id="调试"&gt;
 调试
 &lt;a class="anchor" href="#%e8%b0%83%e8%af%95"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;调试 WebRTC 可能是一项艰巨的任务。有很多部分都处于运行状态，每一个部分都可能出现问题。如果你不够细心，可能会浪费数周的时间来查看错误的模块。当你最终找到出错的部分时，你还需要学习一些知识才能理解问题的根源。&lt;/p&gt;
&lt;p&gt;本章将带你学习 WebRTC 的调试。它将向你展示如何分析并定位相关问题。确定问题后，我们将快速介绍一下流行的调试工具。&lt;/p&gt;
&lt;h2 id="分解问题"&gt;
 分解问题
 &lt;a class="anchor" href="#%e5%88%86%e8%a7%a3%e9%97%ae%e9%a2%98"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;开始调试时，你需要先分解问题的源头。从以下题目开始：&lt;/p&gt;
&lt;h3 id="信令故障"&gt;
 信令故障
 &lt;a class="anchor" href="#%e4%bf%a1%e4%bb%a4%e6%95%85%e9%9a%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="网络故障"&gt;
 网络故障
 &lt;a class="anchor" href="#%e7%bd%91%e7%bb%9c%e6%95%85%e9%9a%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;使用 netcat 测试你的 STUN 服务器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;准备 &lt;strong&gt;20 字节&lt;/strong&gt;的绑定请求数据包：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo -ne &amp;#34;\x00\x01\x00\x00\x21\x12\xA4\x42TESTTESTTEST&amp;#34; | hexdump -C
00000000 00 01 00 00 21 12 a4 42 54 45 53 54 54 45 53 54 |....!..BTESTTEST|
00000010 54 45 53 54 |TEST|
00000014
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;00 01&lt;/code&gt; 是消息类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;00 00&lt;/code&gt; 是数据段的长度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;21 12 a4 42&lt;/code&gt; 是 magic cookie。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;54 45 53 54 54 45 53 54 54 45 53 54&lt;/code&gt; （解码成 ASCII 就是 &lt;code&gt;TESTTESTTEST&lt;/code&gt;） 是 12 字节的 transaction ID。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发送请求并等待 &lt;strong&gt;32 字节&lt;/strong&gt;的响应：&lt;/p&gt;</description></item><item><title>历史</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/10-history-of-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/10-history-of-webrtc/</guid><description>&lt;h1 id="历史"&gt;
 历史
 &lt;a class="anchor" href="#%e5%8e%86%e5%8f%b2"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;在学习 WebRTC 时，开发人员经常对其复杂性感到沮丧，他们认为一些 WebRTC 功能与他们当前的项目无关，并希望 WebRTC 能够更简单一些。但问题是不同的开发者有迥然不同的应用场景。实时通信有着一段丰富的历史，人们在这个领域创造过很多不同的东西。&lt;/p&gt;
&lt;p&gt;WebRTC 是由一系列协议组成的，本章包含了对这些协议作者的采访。
这些采访可以让我们更深入的了解作者们在构建每个协议时所做的设计，并以关于 WebRTC 本身的采访结束。当你理解了软件的意图和设计，你可以用它构建出更有效率的系统。&lt;/p&gt;
&lt;h2 id="rtp"&gt;
 RTP
 &lt;a class="anchor" href="#rtp"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;RTP 和 RTCP 是处理 WebRTC 的所有媒体传输的协议。它是在 1996 年 1 月的&lt;a href="https://tools.ietf.org/html/rfc1889"&gt;RFC 1889&lt;/a&gt;中定义的。
我们很幸运地邀请到其中一位作者&lt;a href="https://github.com/ronf"&gt;Ron Frederick&lt;/a&gt;自己来谈论这个问题。Ron 最近向 GitHub 上传了&lt;a href="https://github.com/ronf/nv"&gt;Network Video tool&lt;/a&gt;，这是一个展示了 RTP 的项目。&lt;/p&gt;
&lt;h3 id="用他自己的话讲"&gt;
 用他自己的话讲
 &lt;a class="anchor" href="#%e7%94%a8%e4%bb%96%e8%87%aa%e5%b7%b1%e7%9a%84%e8%af%9d%e8%ae%b2"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;在 1992 年 10 月，我开始尝试使用 Sun VideoPix 帧采集卡，当时的想法是编写一个基于 IP 多播的网络视频会议工具。它是根据 &amp;ldquo;vat&amp;rdquo; 建模的，&amp;ldquo;vat&amp;rdquo; 是 LBL 开发的一个音频会议工具，它为参加会议的用户使用了类似的轻量级会话协议，你可以简单地使用此工具将数据发送到特定的多播组，并监听来自该组中其他小组成员的任何流量。&lt;/p&gt;
&lt;p&gt;为了使程序真正成功，它需要先压缩视频数据，然后再将其发布到网络上。我的目标是在大约 128 kbps 或标准家庭 ISDN 线路的带宽上生成可接受的可视数据流。我还希望在一半带宽下生成仍能被观看到的东西。这意味着我需要将特定图像尺寸和帧率的视频压缩到大约 20 分之一的大小。我实现了这种压缩，并申请了专利，专利是 &lt;a href="https://patents.google.com/patent/US5485212A"&gt;US5485212A&lt;/a&gt;：用于电话会议的软件视频压缩。&lt;/p&gt;
&lt;p&gt;1992 年 11 月上旬，我向互联网社区发布了视频会议工具 &amp;ldquo;nv&amp;rdquo;（二进制形式）。经过一些初步测试后，它被用于在全球范围内对 11 月 Internet 工程任务组的部分进行视频广播。在 15 个国家 / 地区中，大约有 200 个子网能够接收此广播，并且一周中的某个时候，大约有 50-100 人使用 &amp;ldquo;nv&amp;rdquo; 接收了视频。&lt;/p&gt;</description></item><item><title>常见问题</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/11-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/11-faq/</guid><description>&lt;h1 id="常见问题"&gt;
 常见问题
 &lt;a class="anchor" href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;details &gt;&lt;summary&gt;为什么 WebRTC 使用 UDP？&lt;/summary&gt;
 &lt;div class="markdown-inner"&gt;
 &lt;p&gt;NAT 穿透需要 UDP。没有 NAT 穿透，就无法建立 P2P 连接。UDP 不像 TCP 那样 &amp;quot; 保证送达 &amp;ldquo;，因此 WebRTC 在用户级别提供这一特性。&lt;/p&gt;
&lt;p&gt;要了解更多信息，请参考 &lt;a href="https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/03-connecting/"&gt;连接&lt;/a&gt; 章节。&lt;/p&gt;

 &lt;/div&gt;
&lt;/details&gt;

&lt;details &gt;&lt;summary&gt;数据通道最多可以有几个？&lt;/summary&gt;
 &lt;div class="markdown-inner"&gt;
 因为流标识符有 16 位，所以最多有 65534 个通道。你可以随时关闭再创建一个新的。
 &lt;/div&gt;
&lt;/details&gt;

&lt;details &gt;&lt;summary&gt;WebRTC 是否有带宽限制？&lt;/summary&gt;
 &lt;div class="markdown-inner"&gt;
 数据通道和 RTP 都使用拥塞控制。这意味着 WebRTC 会主动测量你的带宽并尝试使用最佳数值。这是一种平衡措施，这样可以尽量发送数据，而不会使网络连接过载。
 &lt;/div&gt;
&lt;/details&gt;

&lt;details &gt;&lt;summary&gt;我可以发送二进制数据吗？&lt;/summary&gt;
 &lt;div class="markdown-inner"&gt;
 是的，你可以通过数据通道发送文本和二进制数据。
 &lt;/div&gt;
&lt;/details&gt;

&lt;details &gt;&lt;summary&gt;WebRTC 延迟怎么样？&lt;/summary&gt;
 &lt;div class="markdown-inner"&gt;
 &lt;p&gt;对于未作调整的媒体，估计不到 500 毫秒。如果你愿意为延迟调整或牺牲音质 / 画质，有开发人员将延迟降到了 100ms 以下。&lt;/p&gt;
&lt;p&gt;数据通道支持 &amp;quot; 部分可靠性 &amp;quot; 选项，该选项可以减少由于有损连接上的数据重传而引起的延迟。如果配置正确的话，速度可以超过 TCP TLS 连接。&lt;/p&gt;

 &lt;/div&gt;
&lt;/details&gt;

&lt;details &gt;&lt;summary&gt;什么情况下我会需要无序交付的数据通道？&lt;/summary&gt;
 &lt;div class="markdown-inner"&gt;
 有时，新的信息会淘汰旧的信息（例如对象的位置信息）；或者，每个消息都是彼此独立的，并且你需要避免行头阻塞延迟。
 &lt;/div&gt;
&lt;/details&gt;

&lt;details &gt;&lt;summary&gt;我可以通过数据通道发送音频或视频吗？&lt;/summary&gt;
 &lt;div class="markdown-inner"&gt;
 是的，你可以通过数据通道发送任何数据。如果是在浏览器中这样使用，你就需要自行对数据进行解码，然后将其传递给媒体播放器进行渲染；在使用媒体通道时，这部分是自动完成的。
 &lt;/div&gt;
&lt;/details&gt;</description></item><item><title>术语</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/12-glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/12-glossary/</guid><description>&lt;h1 id="术语"&gt;
 术语
 &lt;a class="anchor" href="#%e6%9c%af%e8%af%ad"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ACK: Acknowledgment (确认报文)&lt;/li&gt;
&lt;li&gt;AVP: Audio and Video profile (音频视频描述)&lt;/li&gt;
&lt;li&gt;B-Frame: &lt;a href="../06-media-communication/#intra-and-inter-frame-compression"&gt;Bi-directional Predicted Frame&lt;/a&gt;. A partial picture, is a modification of previous and future pictures. (双向预测帧，存储图片的部分信息，存储的是相对前一张图片和后一张图片的差异信息)&lt;/li&gt;
&lt;li&gt;DCEP: &lt;a href="../07-data-communication/#dcep"&gt;Data Channel Establishment Protocol&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc8832"&gt;RFC 8832&lt;/a&gt; (DataChannel 建立协议)&lt;/li&gt;
&lt;li&gt;DeMux: Demultiplexer (解复用器)&lt;/li&gt;
&lt;li&gt;DLSR: delay since last sender report (从最近一个 Sender Report 开始的时间延迟)&lt;/li&gt;
&lt;li&gt;DTLS: &lt;a href="../04-securing/#dtls"&gt;Datagram Transport Layer Security&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc6347"&gt;RFC 6347&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;E2E: end-to-end&lt;/li&gt;
&lt;li&gt;FEC: &lt;a href="../06-media-communication/#forward-error-correction"&gt;Forward Error Correction&lt;/a&gt; (前向纠错)&lt;/li&gt;
&lt;li&gt;FIR: &lt;a href="../06-media-communication/#full-intra-frame-request-fir-and-picture-loss-indication-pli"&gt;Full INTRA-frame Request&lt;/a&gt; (完整 I 帧请求)&lt;/li&gt;
&lt;li&gt;G.711: A narrowband audio codec (一个窄带音频编码器)&lt;/li&gt;
&lt;li&gt;H.264: Advanced video coding for generic audiovisual services (面向通用视听服务的高级视频编码)&lt;/li&gt;
&lt;li&gt;H.265: Conformance specification for ITU-T H.265 high efficiency video coding. (ITU-T H.265 高效视频编码的一致性规范)&lt;/li&gt;
&lt;li&gt;HEVC: High Efficiency Video Coding (高效视频编码)&lt;/li&gt;
&lt;li&gt;HTTP: Hypertext Transfer Protocol (超文本传输协议)&lt;/li&gt;
&lt;li&gt;HTTPS: HTTP Over TLS defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc2818"&gt;RFC 2818&lt;/a&gt; (基于 TLS 的 HTTP)&lt;/li&gt;
&lt;li&gt;I-Frame: &lt;a href="../06-media-communication/#intra-and-inter-frame-compression"&gt;Intra-coded Frame&lt;/a&gt;. A complete picture, can be decoded without anything else. (内部编码帧，保存完整图片信息，自解码，不依赖外部数据)&lt;/li&gt;
&lt;li&gt;ICE: &lt;a href="../03-connecting/#ice"&gt;Interactive Connectivity Establishment&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc8445"&gt;RFC 8445&lt;/a&gt; (交互式连接建立协议)&lt;/li&gt;
&lt;li&gt;INIT: Initiate (初始化)&lt;/li&gt;
&lt;li&gt;IoT: Internet of Things (物联网)&lt;/li&gt;
&lt;li&gt;IPv4: Internet Protocol, Version 4 (第四代因特网协议)&lt;/li&gt;
&lt;li&gt;IPv6: Internet Protocol, Version 6 (第六代因特网协议)&lt;/li&gt;
&lt;li&gt;ITU-T: International Telecommunication Union Telecommunication Standardization Sector (国际电信联盟电信标准分局)&lt;/li&gt;
&lt;li&gt;JSEP: &lt;a href="../02-signaling/#what-is-the-session-description-protocol-sdp"&gt;JavaScript Session Establishment Protocol&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc8829"&gt;RFC 8829&lt;/a&gt; (JavaScript 会话建立协议)&lt;/li&gt;
&lt;li&gt;MCU: &lt;a href="../08-applied-webrtc/#mcu"&gt;Multi-point Conferencing Unit&lt;/a&gt; (多点会话单元)&lt;/li&gt;
&lt;li&gt;mDNS: &lt;a href="../03-connecting/#mdns"&gt;Multicast DNS&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc6762"&gt;RFC 6762&lt;/a&gt; (组播 DNS)&lt;/li&gt;
&lt;li&gt;MITM: Man-In-The-Middle&lt;/li&gt;
&lt;li&gt;MTU: Maximum Transmission Unit (最大传输单元)&lt;/li&gt;
&lt;li&gt;MUX: Multiplexing (复用，一般指把不同格式的数据合并存储或传输)&lt;/li&gt;
&lt;li&gt;NACK: Negative Acknowledgment (逆确认报文，ACK 反馈收到报文 ,NACK 反馈未收到报文 )&lt;/li&gt;
&lt;li&gt;NAT: &lt;a href="../03-connecting/#nat-mapping"&gt;Network Address Translation&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc4787"&gt;RFC 4787&lt;/a&gt; (网络地址转换，域名地址转换成 IP 地址)&lt;/li&gt;
&lt;li&gt;Opus: A totally open, royalty-free, highly versatile audio codec (一个完全开放、免版税、高度通用的音频编解码器)&lt;/li&gt;
&lt;li&gt;P-Frame: &lt;a href="../06-media-communication/#intra-and-inter-frame-compression"&gt;Predicted Frame&lt;/a&gt;. A partial picture, containing only changes from the previous picture. (前向预测帧，只保存相对于上一帧的差异信息)&lt;/li&gt;
&lt;li&gt;P2P: peer-to-peer&lt;/li&gt;
&lt;li&gt;PLI: &lt;a href="../06-media-communication/#full-intra-frame-request-fir-and-picture-loss-indication-pli"&gt;Picture Loss Indication&lt;/a&gt; (图片丢失指示)&lt;/li&gt;
&lt;li&gt;PPID: &lt;a href="../07-data-communication/#payload-protocol-identifier"&gt;Payload Protocol Identifier&lt;/a&gt; (Payload 协议标识)&lt;/li&gt;
&lt;li&gt;REMB: &lt;a href="../06-media-communication/#tmmbr-tmmbn-and-remb"&gt;Receiver Estimated Maximum Bitrate&lt;/a&gt; (接收端估计的最大比特率)&lt;/li&gt;
&lt;li&gt;RFC: Request for Comments (征求意见)&lt;/li&gt;
&lt;li&gt;RMCAT: &lt;a href="../06-media-communication/#generating-a-bandwidth-estimate"&gt;RTP Media Congestion Avoidance Techniques&lt;/a&gt; (RTP 媒体拥塞避免技术)&lt;/li&gt;
&lt;li&gt;RR: Receiver Report (RCTP 接收者报告)&lt;/li&gt;
&lt;li&gt;RTCP: &lt;a href="../10-history-of-webrtc/#rtp"&gt;RTP Control Protocol&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc3550"&gt;RFC 3550&lt;/a&gt; (RTP 控制协议)&lt;/li&gt;
&lt;li&gt;RTP: &lt;a href="../10-history-of-webrtc/#rtp"&gt;Real-time transport protocol&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc3550"&gt;RFC 3550&lt;/a&gt; (实时传输协议)&lt;/li&gt;
&lt;li&gt;RTT: Round-trip time (往返时间)&lt;/li&gt;
&lt;li&gt;SACK: Selective Acknowledgment (选择性确认)&lt;/li&gt;
&lt;li&gt;SCTP: &lt;a href="../07-data-communication/#stream-control-transmission-protocol"&gt;Stream Control Transmission Protocol&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc4960"&gt;RFC 4960&lt;/a&gt; (流控传输协议)&lt;/li&gt;
&lt;li&gt;SDP: &lt;a href="../02-signaling/#what-is-the-session-description-protocol-sdp"&gt;Session Description Protocol&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc8866"&gt;RFC 8866&lt;/a&gt; (会话描述协议)&lt;/li&gt;
&lt;li&gt;SFU: &lt;a href="../08-applied-webrtc/#selective-forwarding-unit"&gt;Selective Forwarding Unit&lt;/a&gt; (选择性转发单元)&lt;/li&gt;
&lt;li&gt;SR: Sender Report (RCTP 发送者报告)&lt;/li&gt;
&lt;li&gt;SRTP: &lt;a href="../04-securing/#srtp"&gt;Secure Real-time Transport Protocol&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc3711"&gt;RFC 3711&lt;/a&gt; (安全的 RTP)&lt;/li&gt;
&lt;li&gt;SSRC: Synchronization Source (同步源)&lt;/li&gt;
&lt;li&gt;STUN: &lt;a href="../03-connecting/#stun"&gt;Session Traversal Utilities for NAT&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc8489"&gt;RFC 8489&lt;/a&gt; (NAT 会话穿透)&lt;/li&gt;
&lt;li&gt;TCP: Transmission Control Protocol (传输控制协议)&lt;/li&gt;
&lt;li&gt;TLS: The Transport Layer Security defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc8446"&gt;RFC 8446&lt;/a&gt; (传输层安全)&lt;/li&gt;
&lt;li&gt;TMMBN: &lt;a href="../06-media-communication/#tmmbr-tmmbn-and-remb"&gt;Temporary Maximum Media Stream Bit Rate Notification&lt;/a&gt; (临时最大媒体流比特率通知)&lt;/li&gt;
&lt;li&gt;TMMBR: &lt;a href="../06-media-communication/#tmmbr-tmmbn-and-remb"&gt;Temporary Maximum Media Stream Bit Rate Request&lt;/a&gt; (临时最大媒体流比特率请求)&lt;/li&gt;
&lt;li&gt;TSN: &lt;a href="../07-data-communication/#transmission-sequence-number"&gt;Transmission Sequence Number&lt;/a&gt; (传输序列号)&lt;/li&gt;
&lt;li&gt;TURN: &lt;a href="../03-connecting/#turn"&gt;Traversal Using Relays around NAT&lt;/a&gt; defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc8656"&gt;RFC 8656&lt;/a&gt; (基于转发的 NAT 穿透)&lt;/li&gt;
&lt;li&gt;TWCC: &lt;a href="../06-media-communication/#transport-wide-congestion-control"&gt;Transport Wide Congestion Control&lt;/a&gt; (传输拥塞控制)&lt;/li&gt;
&lt;li&gt;UDP: User Datagram Protocol (数据报协议)&lt;/li&gt;
&lt;li&gt;VP8, VP9: Highly-efficient video compression technologies (video &amp;ldquo;codecs&amp;rdquo;) developed by the WebM Project. Anyone may use these codecs royalty-free. (WebM 项目开发的高效视频压缩技术 (视频编解码)，完全免费)&lt;/li&gt;
&lt;li&gt;WebM: An open media file format designed for the web. (一个开放的 Web 媒体文件格式)&lt;/li&gt;
&lt;li&gt;WebRTC: Web Real-Time Communications. &lt;a href="https://www.w3.org/TR/webrtc/"&gt;W3C WebRTC 1.0: Real-Time Communication Between Browsers&lt;/a&gt; (Web 实时通信)&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Reference</title><link>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/13-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutece.github.io/webrtc-for-the-curious-kr/zh/docs/13-reference/</guid><description>&lt;h1 id="reference"&gt;
 Reference
 &lt;a class="anchor" href="#reference"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="webrtcw3c"&gt;
 WebRTC(W3C)
 &lt;a class="anchor" href="#webrtcw3c"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/webrtc/"&gt;WebRTC 1.0: Real-Time Communication Between Browsers&lt;/a&gt; [26 January 2021] (Status: Recommendation)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/groups/wg/webrtc/publications"&gt;Web Real-Time Communications Working Group - Publications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="webrtcrfc"&gt;
 WebRTC(RFC)
 &lt;a class="anchor" href="#webrtcrfc"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8825"&gt;RFC8825&lt;/a&gt;: Overview: Real-Time Protocols for Browser-Based Applications H. Alvestrand [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8826"&gt;RFC8826&lt;/a&gt;: Security Considerations for WebRTC E. Rescorla [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8836"&gt;RFC8836&lt;/a&gt;: Congestion Control Requirements for Interactive Real-Time Media R. Jesup, Z. Sarker [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8854"&gt;RFC8854&lt;/a&gt;: WebRTC Forward Error Correction Requirements J. Uberti [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dtls"&gt;
 DTLS
 &lt;a class="anchor" href="#dtls"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc6347"&gt;RFC6347&lt;/a&gt;: Datagram Transport Layer Security Version 1.2 E. Rescorla, N. Modadugu [January 2012] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc4347"&gt;RFC4347&lt;/a&gt;) (Obsoleted-By &lt;a href="http://www.rfc-editor.org/info/rfc9147"&gt;RFC9147&lt;/a&gt;) (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc7507"&gt;RFC7507&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc7905"&gt;RFC7905&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8996"&gt;RFC8996&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc9146"&gt;RFC9146&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc9147"&gt;RFC9147&lt;/a&gt;: The Datagram Transport Layer Security (DTLS) Protocol Version 1.3 E. Rescorla, H. Tschofenig, N. Modadugu [April 2022] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc6347"&gt;RFC6347&lt;/a&gt;) (Status: PROPOSED STANDARD) (See also: &lt;a href="https://github.com/openssl/openssl/issues/13900"&gt;OpenSSL DTLS 1.3 status&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="datachannel"&gt;
 DataChannel
 &lt;a class="anchor" href="#datachannel"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8831"&gt;RFC8831&lt;/a&gt;: WebRTC Data Channels R. Jesup, S. Loreto, M. Tüxen [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8832"&gt;RFC8832&lt;/a&gt;: WebRTC Data Channel Establishment Protocol R. Jesup, S. Loreto, M. Tüxen [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8864"&gt;RFC8864&lt;/a&gt;: Negotiation Data Channels Using the Session Description Protocol (SDP) K. Drage, M. Makaraju, R. Ejzak, J. Marcon, R. Even [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mediatransport"&gt;
 MediaTransport
 &lt;a class="anchor" href="#mediatransport"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8834"&gt;RFC8834&lt;/a&gt;: Media Transport and Use of RTP in WebRTC C. Perkins, M. Westerlund, J. Ott [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8837"&gt;RFC8837&lt;/a&gt;: Differentiated Services Code Point (DSCP) Packet Markings for WebRTC QoS P. Jones, S. Dhesikan, C. Jennings, D. Druta [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sctp"&gt;
 SCTP
 &lt;a class="anchor" href="#sctp"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc3758"&gt;RFC3758&lt;/a&gt;: Stream Control Transmission Protocol (SCTP) Partial Reliability Extension R. Stewart, M. Ramalho, Q. Xie, M. Tuexen, P. Conrad [May 2004] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc5061"&gt;RFC5061&lt;/a&gt;: Stream Control Transmission Protocol (SCTP) Dynamic Address Reconfiguration R. Stewart, Q. Xie, M. Tuexen, S. Maruyama, M. Kozuka [September 2007] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc5827"&gt;RFC5827&lt;/a&gt;: Early Retransmit for TCP and Stream Control Transmission Protocol (SCTP) M. Allman, K. Avrachenkov, U. Ayesta, J. Blanton, P. Hurtig [May 2010] (Status: EXPERIMENTAL)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc6083"&gt;RFC6083&lt;/a&gt;: Datagram Transport Layer Security (DTLS) for Stream Control Transmission Protocol (SCTP) M. Tuexen, R. Seggelmann, E. Rescorla [January 2011] (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc8996"&gt;RFC8996&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc6525"&gt;RFC6525&lt;/a&gt;: Stream Control Transmission Protocol (SCTP) Stream Reconfiguration R. Stewart, M. Tuexen, P. Lei [February 2012] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc6951"&gt;RFC6951&lt;/a&gt;: UDP Encapsulation of Stream Control Transmission Protocol (SCTP) Packets for End-Host to End-Host Communication M. Tuexen, R. Stewart [May 2013] (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc8899"&gt;RFC8899&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc7765"&gt;RFC7765&lt;/a&gt;: TCP and Stream Control Transmission Protocol (SCTP) RTO Restart P. Hurtig, A. Brunstrom, A. Petlund, M. Welzl [February 2016] (Status: EXPERIMENTAL)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8260"&gt;RFC8260&lt;/a&gt;: Stream Schedulers and User Message Interleaving for the Stream Control Transmission Protocol R. Stewart, M. Tuexen, S. Loreto, R. Seggelmann [November 2017] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8261"&gt;RFC8261&lt;/a&gt;: Datagram Transport Layer Security (DTLS) Encapsulation of SCTP Packets M. Tuexen, R. Stewart, R. Jesup, S. Loreto [November 2017] (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc8899"&gt;RFC8899&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8996"&gt;RFC8996&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8841"&gt;RFC8841&lt;/a&gt;: Session Description Protocol (SDP) Offer/Answer Procedures for Stream Control Transmission Protocol (SCTP) over Datagram Transport Layer Security (DTLS) Transport C. Holmberg, R. Shpount, S. Loreto, G. Camarillo [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8899"&gt;RFC8899&lt;/a&gt;: Packetization Layer Path MTU Discovery for Datagram Transports G. Fairhurst, T. Jones, M. Tüxen, I. Rüngeler, T. Völker [September 2020] (Updates &lt;a href="http://www.rfc-editor.org/info/rfc4821"&gt;RFC4821&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc4960"&gt;RFC4960&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc6951"&gt;RFC6951&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8085"&gt;RFC8085&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8261"&gt;RFC8261&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc9260"&gt;RFC9260&lt;/a&gt;: Stream Control Transmission Protocol R. Stewart, M. Tüxen, K. Nielsen [June 2022] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc4460"&gt;RFC4460&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc4960"&gt;RFC4960&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc6096"&gt;RFC6096&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc7053"&gt;RFC7053&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8540"&gt;RFC8540&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sdp"&gt;
 SDP
 &lt;a class="anchor" href="#sdp"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8829"&gt;RFC8829&lt;/a&gt;: JavaScript Session Establishment Protocol (JSEP) J. Uberti, C. Jennings, E. Rescorla [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8830"&gt;RFC8830&lt;/a&gt;: WebRTC MediaStream Identification in the Session Description Protocol H. Alvestrand [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8839"&gt;RFC8839&lt;/a&gt;: Session Description Protocol (SDP) Offer/Answer Procedures for Interactive Connectivity Establishment (ICE) M. Petit-Huguenin, S. Nandakumar, C. Holmberg, A. Keränen, R. Shpount [January 2021] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc5245"&gt;RFC5245&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc6336"&gt;RFC6336&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8841"&gt;RFC8841&lt;/a&gt;: Session Description Protocol (SDP) Offer/Answer Procedures for Stream Control Transmission Protocol (SCTP) over Datagram Transport Layer Security (DTLS) Transport C. Holmberg, R. Shpount, S. Loreto, G. Camarillo [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8843"&gt;RFC8843&lt;/a&gt;: Negotiating Media Multiplexing Using the Session Description Protocol (SDP) C. Holmberg, H. Alvestrand, C. Jennings [January 2021] (Obsoleted-By &lt;a href="http://www.rfc-editor.org/info/rfc9143"&gt;RFC9143&lt;/a&gt;) (Updates &lt;a href="http://www.rfc-editor.org/info/rfc3264"&gt;RFC3264&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc5888"&gt;RFC5888&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc7941"&gt;RFC7941&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8844"&gt;RFC8844&lt;/a&gt;: Unknown Key-Share Attacks on Uses of TLS with the Session Description Protocol (SDP) M. Thomson, E. Rescorla [January 2021] (Updates &lt;a href="http://www.rfc-editor.org/info/rfc8122"&gt;RFC8122&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8851"&gt;RFC8851&lt;/a&gt;: RTP Payload Format Restrictions A.B. Roach [January 2021] (Updates &lt;a href="http://www.rfc-editor.org/info/rfc4855"&gt;RFC4855&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8852"&gt;RFC8852&lt;/a&gt;: RTP Stream Identifier Source Description (SDES) A.B. Roach, S. Nandakumar, P. Thatcher [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8853"&gt;RFC8853&lt;/a&gt;: Using Simulcast in Session Description Protocol (SDP) and RTP Sessions B. Burman, M. Westerlund, S. Nandakumar, M. Zanaty [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8866"&gt;RFC8866&lt;/a&gt;: SDP: Session Description Protocol A. Begen, P. Kyzivat, C. Perkins, M. Handley [January 2021] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc4566"&gt;RFC4566&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rtp"&gt;
 RTP
 &lt;a class="anchor" href="#rtp"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc3550"&gt;RFC3550&lt;/a&gt;: RTP: A Transport Protocol for Real-Time Applications H. Schulzrinne, S. Casner, R. Frederick, V. Jacobson [July 2003] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc1889"&gt;RFC1889&lt;/a&gt;) (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc5506"&gt;RFC5506&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc5761"&gt;RFC5761&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc6051"&gt;RFC6051&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc6222"&gt;RFC6222&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc7022"&gt;RFC7022&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc7160"&gt;RFC7160&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc7164"&gt;RFC7164&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8083"&gt;RFC8083&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8108"&gt;RFC8108&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8860"&gt;RFC8860&lt;/a&gt;) (Also &lt;a href="http://www.rfc-editor.org/info/std0064"&gt;STD0064&lt;/a&gt;) (Status: INTERNET STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc3611"&gt;RFC3611&lt;/a&gt;: RTP Control Protocol Extended Reports (RTCP XR) T. Friedman, R. Caceres, A. Clark [November 2003] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc3711"&gt;RFC3711&lt;/a&gt;: The Secure Real-time Transport Protocol (SRTP) M. Baugher, D. McGrew, M. Naslund, E. Carrara, K. Norrman [March 2004] (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc5506"&gt;RFC5506&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc6904"&gt;RFC6904&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc4585"&gt;RFC4585&lt;/a&gt;: Extended RTP Profile for Real-time Transport Control Protocol (RTCP)-Based Feedback (RTP/AVPF) J. Ott, S. Wenger, N. Sato, C. Burmeister, J. Rey [July 2006] (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc5506"&gt;RFC5506&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8108"&gt;RFC8108&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc5104"&gt;RFC5104&lt;/a&gt;: Codec Control Messages in the RTP Audio-Visual Profile with Feedback (AVPF) S. Wenger, U. Chandra, M. Westerlund, B. Burman [February 2008] (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc7728"&gt;RFC7728&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8082"&gt;RFC8082&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc5764"&gt;RFC5764&lt;/a&gt;: Datagram Transport Layer Security (DTLS) Extension to Establish Keys for the Secure Real-time Transport Protocol (SRTP) D. McGrew, E. Rescorla [May 2010] (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc7983"&gt;RFC7983&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc6904"&gt;RFC6904&lt;/a&gt;: Encryption of Header Extensions in the Secure Real-time Transport Protocol (SRTP) J. Lennox [April 2013] (Updates &lt;a href="http://www.rfc-editor.org/info/rfc3711"&gt;RFC3711&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc7741"&gt;RFC7741&lt;/a&gt;: RTP Payload Format for VP8 Video P. Westin, H. Lundin, M. Glover, J. Uberti, F. Galligan [March 2016] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8285"&gt;RFC8285&lt;/a&gt;: A General Mechanism for RTP Header Extensions D. Singer, H. Desineni, R. Even [October 2017] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc5285"&gt;RFC5285&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8852"&gt;RFC8852&lt;/a&gt;: RTP Stream Identifier Source Description (SDES) A.B. Roach, S. Nandakumar, P. Thatcher [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8858"&gt;RFC8858&lt;/a&gt;: Indicating Exclusive Support of RTP and RTP Control Protocol (RTCP) Multiplexing Using the Session Description Protocol (SDP) C. Holmberg [January 2021] (Updates &lt;a href="http://www.rfc-editor.org/info/rfc5761"&gt;RFC5761&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8860"&gt;RFC8860&lt;/a&gt;: Sending Multiple Types of Media in a Single RTP Session M. Westerlund, C. Perkins, J. Lennox [January 2021] (Updates &lt;a href="http://www.rfc-editor.org/info/rfc3550"&gt;RFC3550&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc3551"&gt;RFC3551&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8867"&gt;RFC8867&lt;/a&gt;: Test Cases for Evaluating Congestion Control for Interactive Real-Time Media Z. Sarker, V. Singh, X. Zhu, M. Ramalho [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8868"&gt;RFC8868&lt;/a&gt;: Evaluating Congestion Control for Interactive Real-Time Media V. Singh, J. Ott, S. Holmer [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8869"&gt;RFC8869&lt;/a&gt;: Evaluation Test Cases for Interactive Real-Time Media over Wireless Networks Z. Sarker, X. Zhu, J. Fu [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8872"&gt;RFC8872&lt;/a&gt;: Guidelines for Using the Multiplexing Features of RTP to Support Multiple Media Streams M. Westerlund, B. Burman, C. Perkins, H. Alvestrand, R. Even [January 2021] (Status: INFORMATIONAL)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8888"&gt;RFC8888&lt;/a&gt;: RTP Control Protocol (RTCP) Feedback for Congestion Control Z. Sarker, C. Perkins, V. Singh, M. Ramalho [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ice-turn-and-stun"&gt;
 ICE, TURN and STUN
 &lt;a class="anchor" href="#ice-turn-and-stun"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc5780"&gt;RFC5780&lt;/a&gt;: NAT Behavior Discovery Using Session Traversal Utilities for NAT (STUN) D. MacDonald, B. Lowekamp [May 2010] (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc8553"&gt;RFC8553&lt;/a&gt;) (Status: EXPERIMENTAL)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8445"&gt;RFC8445&lt;/a&gt;: Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal A. Keranen, C. Holmberg, J. Rosenberg [July 2018] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc5245"&gt;RFC5245&lt;/a&gt;) (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc8863"&gt;RFC8863&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8489"&gt;RFC8489&lt;/a&gt;: Session Traversal Utilities for NAT (STUN) M. Petit-Huguenin, G. Salgueiro, J. Rosenberg, D. Wing, R. Mahy, P. Matthews [February 2020] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc5389"&gt;RFC5389&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8656"&gt;RFC8656&lt;/a&gt;: Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN) T. Reddy, A. Johnston, P. Matthews, J. Rosenberg [February 2020] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc5766"&gt;RFC5766&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc6156"&gt;RFC6156&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8835"&gt;RFC8835&lt;/a&gt;: Transports for WebRTC H. Alvestrand [January 2021] (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8838"&gt;RFC8838&lt;/a&gt;: Trickle ICE: Incremental Provisioning of Candidates for the Interactive Connectivity Establishment (ICE) Protocol E. Ivov, J. Uberti, P. Saint-Andre [January 2021] (Updated-By &lt;a href="http://www.rfc-editor.org/info/rfc8863"&gt;RFC8863&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8839"&gt;RFC8839&lt;/a&gt;: Session Description Protocol (SDP) Offer/Answer Procedures for Interactive Connectivity Establishment (ICE) M. Petit-Huguenin, S. Nandakumar, C. Holmberg, A. Keränen, R. Shpount [January 2021] (Obsoletes &lt;a href="http://www.rfc-editor.org/info/rfc5245"&gt;RFC5245&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc6336"&gt;RFC6336&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rfc-editor.org/info/rfc8863"&gt;RFC8863&lt;/a&gt;: Interactive Connectivity Establishment Patiently Awaiting Connectivity (ICE PAC) C. Holmberg, J. Uberti [January 2021] (Updates &lt;a href="http://www.rfc-editor.org/info/rfc8445"&gt;RFC8445&lt;/a&gt;, &lt;a href="http://www.rfc-editor.org/info/rfc8838"&gt;RFC8838&lt;/a&gt;) (Status: PROPOSED STANDARD)&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>